using easyFramework.Sys;
using easyFramework.Sys.ToolLib;


namespace easyFramework.Frontend.ASP.HTMLRenderer
{
	//================================================================================
	//Class:     efHTMLElement
	//--------------------------------------------------------------------------------'
	//Module:    efHTMLElement.vb
	//--------------------------------------------------------------------------------'
	//Copyright: Promain Software-Betreuung GmbH
	//--------------------------------------------------------------------------------'
	//Purpose:   base class for html-elements, which can be rendered
	//--------------------------------------------------------------------------------'
	//Created:   23.03.2004 17:39:32
	//--------------------------------------------------------------------------------'
	//Changed:
	//--------------------------------------------------------------------------------'

	public abstract class efHTMLElement
	{


		//================================================================================
		//Public Consts:
		//================================================================================
		public const string efHTML_QUOT = "&quot;";


		//================================================================================
		//Private Fields:
		//================================================================================
		private efArrayList maoChildElements;
		private efHTMLElement moParent;
		private System.Guid moUniqueID;


		//================================================================================
		//Protected Fields:
		//================================================================================
		protected efAttribute[] moAttributeList;



		//================================================================================
		//Function:  msGetIndent
		//--------------------------------------------------------------------------------'
		//Purpose:   gets indents for a nicer html-code
		//--------------------------------------------------------------------------------'
		//Params:   the level, beginning with "1"
		//--------------------------------------------------------------------------------'
		//Returns:   the tabs
		//--------------------------------------------------------------------------------'
		//Created:   26.03.2004 01:10:23
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		protected string msGetIndent(int lLevel)
		{
			string sIndent = "";
			for (int i = 1; i <= lLevel - 1; i++)
			{
				sIndent += "\t";
			}
			return sIndent;
		}
		//================================================================================
		//Sub:       mAddChild
		//--------------------------------------------------------------------------------'
		//Purpose:   adds the child-element to the child-nodelist
		//--------------------------------------------------------------------------------'
		//Params:    the child-element
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 19:09:45
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		protected void mAddChild (efHTMLElement oChildElement)
		{
	
			//check wether itself can be the parent of the new child:
			string[] asAllowedParents = oChildElement.asAllowedParentTags();
			bool bParentOk = false;
			for (int i = 0; i <= asAllowedParents.Length - 1; i++)
			{
				if (Functions.LCase(asAllowedParents[i]) == Functions.LCase(sGetNodeName()) | asAllowedParents[i] == "*")
				{
					bParentOk = true;
					break;
				}
			}
	
			if (! bParentOk)
			{
				throw (new efException("HTML-Error: the child-element " + oChildElement.sGetNodeName() + " may not be the child of " + this.sGetNodeName()));
			}
	
			maoChildElements.Add(oChildElement);
	
		}

		//================================================================================
		//Sub:       mRemoveChild
		//--------------------------------------------------------------------------------'
		//Purpose:   is called from the constructor and removes the given child,
		//           when it belongs to the children
		//--------------------------------------------------------------------------------'
		//Params:    the child-element
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 19:09:45
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		protected void mRemoveChild (efHTMLElement oChildElement)
		{
	
			for (int i = 0; i <= maoChildElements.Count - 1; i++)
			{
				if (((efHTMLElement)(maoChildElements[i])).oGuid.Equals(oChildElement.oGuid))
				{
					maoChildElements.RemoveAt(i);
					break;
				}
			}
	
		}
		//================================================================================
		//Public Properties:
		//================================================================================

		//================================================================================
		//Property:  aoChildElements
		//--------------------------------------------------------------------------------'
		//Purpose:   child-elements array
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 18:27:08
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public efHTMLElement[] aoChildElements
		{
			get
			{
				return ((efHTMLElement[])(maoChildElements.ToArray(typeof(efHTMLElement))));
			}
		}


		//================================================================================
		//Property:  oParent
		//--------------------------------------------------------------------------------'
		//Purpose:   the parent-node
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 18:19:14
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public efHTMLElement oParent
		{
			get
			{
				return moParent;
			}
			set
			{
		
				//remove self from current parent:
				if (moParent != null)
				{
					moParent.mRemoveChild(this);
				}
		
				//add self to the parent:
				if (value != null)
				{
					value.mAddChild(this);
				}
		
		
				moParent = value;
		
			}
		}



		//================================================================================
		//Property:  oGuid
		//--------------------------------------------------------------------------------'
		//Purpose:   for comparison each html-element gets an unique-id
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 19:27:55
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public System.Guid oGuid
		{
			get
			{
				return moUniqueID;
			}
	
		}



		//================================================================================
		//Property:  Attributes
		//--------------------------------------------------------------------------------'
		//Purpose:   default-property to reach all attributes
		//--------------------------------------------------------------------------------'
		//Params:    the attribute name
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 23:52:32
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public efAttribute this[string sName]
		{
			get
			{
		
				for (int i = 0; i <= moAttributeList.Length - 1; i++)
				{
					if (Functions.LCase(moAttributeList[i].sName) == Functions.LCase(sName))
					{
						return moAttributeList[i];
					}
				}
		
				efAttribute oAttr = new efAttribute();
				oAttr.sName = sName;

				//------------add to array-------
				efAttribute[] newArray = new efAttribute[moAttributeList.Length + 1];
				moAttributeList.CopyTo(newArray, 0);
				newArray[newArray.Length-1] = oAttr;
				moAttributeList = newArray;

				return oAttr;
		
			}
		}

		//================================================================================
		//Public Methods:
		//================================================================================

		//================================================================================
		//Sub:       New
		//--------------------------------------------------------------------------------'
		//Purpose:   constructor -
		//           should be overwritten, so that the derived classes can set their
		//           node-name
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 18:29:11
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public efHTMLElement(efHTMLElement oParent) 
		{
			maoChildElements = new efArrayList();
			moAttributeList = ((efAttribute[])(System.Array.CreateInstance(typeof(efAttribute), 0)));
	
			//set the parent:
			this.oParent = oParent;
			moUniqueID = System.Guid.NewGuid();
		}


		//================================================================================
		//Sub:       gDetachFromParent
		//--------------------------------------------------------------------------------'
		//Purpose:   detaches the current-element from its parent
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   09.04.2004 02:01:32
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public void gDetachFromParent ()
		{
			for (int i = 0; i <= moParent.aoChildElements.Length - 1; i++)
			{
				moParent.mRemoveChild(this);
		
			}
			moParent = null;
		}


		//================================================================================
		//Sub:       gRenderBeginTag
		//--------------------------------------------------------------------------------'
		//Purpose:   rendering with htmltextwriter
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   13.04.2004 02:47:06
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public virtual void gRenderBeginTag (System.Web.UI.HtmlTextWriter output, int lLevel)
		{
	
			FastString oSb = new FastString();
	
	
			gRenderBeginTag(oSb, lLevel);
	
			output.Write(oSb.ToString());
	
		}


		//================================================================================
		//Sub:       gRenderEndTag
		//--------------------------------------------------------------------------------'
		//Purpose:   rendering with htmltextwriter
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   13.04.2004 02:48:09
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public virtual void gRenderEndTag (System.Web.UI.HtmlTextWriter output, int lLevel)
		{
	
			FastString oSb = new FastString();
	
	
			gRenderEndTag(oSb, lLevel);
	
			output.Write(oSb.ToString());
		}


		//================================================================================
		//Sub:       mRenderBeginTag
		//--------------------------------------------------------------------------------'
		//Purpose:   renders the begin tag
		//--------------------------------------------------------------------------------'
		//Params:    the current html (stringbuilder)
		//           level - how many tabs
		//--------------------------------------------------------------------------------'
		//Returns:   html
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 17:52:56
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public virtual void gRenderBeginTag (FastString sHtmlBuilder, int lLevel)
		{
	
			for (int i = 1; i <= lLevel - 1; i++)
			{
				sHtmlBuilder.Append("\t");
			}
	
			sHtmlBuilder.Append("<" + sGetNodeName());
	
			if (moAttributeList != null)
			{
		
				foreach (efAttribute oAttr in moAttributeList)
				{
					if (oAttr.bIsEmpty == false)
					{
				
						sHtmlBuilder.Append(" " + oAttr.sName + "=\"" + easyFramework.Sys.ToolLib.DataConversion.gsCStr(Functions.Replace(oAttr.sValue, "\"", efHTML_QUOT)) + "\"");
				
					}
			
				}
			}
	
			sHtmlBuilder.Append(">" + "\n");
	
		}

		//================================================================================
		//Sub:       gRenderBeginTag
		//--------------------------------------------------------------------------------'
		//Purpose:   renders the end tag
		//--------------------------------------------------------------------------------'
		//Params:    the current html (stringbuilder)
		//           level - how many tabs
		//--------------------------------------------------------------------------------'
		//Returns:   html
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 17:52:56
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public virtual void gRenderEndTag (FastString sHtmlBuilder, int lLevel)
		{
	
			for (int i = 1; i <= lLevel - 1; i++)
			{
				sHtmlBuilder.Append("\t");
			}
	
			sHtmlBuilder.Append("</" + sGetNodeName() + ">" + "\n");
	
		}
		//================================================================================
		//Property:  sNodeName
		//--------------------------------------------------------------------------------'
		//Purpose:   returns nodename like TR TD BODY HTML
		//           speciality: if the nodename is "TEXT", then
		//           it is a textnode
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 18:17:49
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public virtual string sGetNodeName()
		{
	
			return "";
	
		}

		//================================================================================
		//Sub:       gRender
		//--------------------------------------------------------------------------------'
		//Purpose:   creates html of itself and child-components; calls
		//           sRenderBeginTag and sRenderEndTag
		//--------------------------------------------------------------------------------'
		//Params:    the current html (stringbuilder)
		//--------------------------------------------------------------------------------'
		//Returns:   html
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 17:52:56
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public void gRender (FastString oHtmlBuilder, int lLevel)
		{
	
			gRenderBeginTag(oHtmlBuilder, lLevel);
	
			foreach (efHTMLElement child in maoChildElements)
			{
		
				child.gRender(oHtmlBuilder, lLevel + 1);
		
			}
	
			gRenderEndTag(oHtmlBuilder, lLevel);
		}


		//================================================================================
		//Sub:       gRender
		//--------------------------------------------------------------------------------'
		//Purpose:   uses the HtmlTextWriter
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   01.04.2004 23:59:20
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public void gRender (System.Web.UI.HtmlTextWriter oHtmlBuilder, int lLevel)
		{
	
			FastString os = new FastString();
			gRender(os, lLevel);
	
			oHtmlBuilder.Write(os.ToString());
	
		}





		//================================================================================
		//Function:  asAllowedParentTags
		//--------------------------------------------------------------------------------'
		//Purpose:   returns all allowed parent-tags; should be derived
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Returns:   string-list, with values like "TD", "P", "TR" ...
		//--------------------------------------------------------------------------------'
		//Created:   23.03.2004 18:47:26
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public abstract string[] asAllowedParentTags();




	}

}
