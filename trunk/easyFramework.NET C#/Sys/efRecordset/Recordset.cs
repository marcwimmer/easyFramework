using System;
using easyFramework.Sys;
using easyFramework.Sys.Xml;
using easyFramework.Sys.ToolLib;
using System.Text;

namespace easyFramework.Sys
{
	//================================================================================
	// Project:      easyFramework
	// Copyright:    Promain Software-Betreuung GmbH
	// Component:    Recordset.vb
	//--------------------------------------------------------------------------------
	// Purpose:      Recordset-object
	//--------------------------------------------------------------------------------
	// Created:      21.03.04 M.Wimmer (mwimmer@promain-software.de)
	//--------------------------------------------------------------------------------
	// Changed:		03.06.2004 - don't use xml as internal save-format; using
	//                            arraylists instead (faster access)
	//                            removed oFieldDefList
	//================================================================================
	
	//================================================================================
//Imports:
	//================================================================================
	
	//================================================================================
	// Class:        Recordset
	//--------------------------------------------------------------------------------
	// Purpose:      Recordset-object
	//--------------------------------------------------------------------------------
	// Created:      21.03.04 M.Wimmer (mwimmer@promain-software.de)
	//--------------------------------------------------------------------------------
	// Changed:
	//================================================================================
	public class Recordset
	{
		
		//================================================================================
		//private fields:
		//================================================================================
		private efArrayList moFieldLists; //contains FieldList-objects
		private RecordsetObjects.FieldList moFieldDefList; //contains the definition of the fields; contains only null-values;
		private int lCurrent;
		
		
		//================================================================================
		//Public Consts:
		//================================================================================
		public const string efsXmlNode_recordset = "recordset";
		
		//================================================================================
		//public properties:
		//================================================================================
		
		
		//================================================================================
//Property:  BOF
		//--------------------------------------------------------------------------------'
//Purpose:
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 20:44:18
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public bool BOF
		{
			get{
				if (lRecordcount == 0)
				{
					return true;
				}
				else
				{
					if (lCurrent <= -1)
					{
						return true;
					}
					else
					{
						return false;
						
					}
				}
			}
		}
		
		
		//================================================================================
//Property:  EOF
		//--------------------------------------------------------------------------------'
//Purpose:
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 20:44:23
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public bool EOF
		{
			get{
				if (lRecordcount == 0)
				{
					return true;
				}
				else
				{
					if (lCurrent >= lRecordcount)
					{
						return true;
					}
					else
					{
						return false;
						
					}
				}
			}
		}
		
		
		//================================================================================
		//Property:  oDefault
		//--------------------------------------------------------------------------------'
		//Purpose:   default-property
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   03.06.2004 23:59:08
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public RecordsetObjects.Field this[string sName]
		{
			get{
				if (EOF | BOF | lRecordcount == 0)
				{
					throw (new Exception("no data or bof or eof"));
				}
			
				RecordsetObjects.FieldList oFieldList = moGetCurrentRecordNode();
				return oFieldList[sName];
			}
			
		}
		
		
		//================================================================================
		//Property:  oDefault
		//--------------------------------------------------------------------------------'
		//Purpose:   default-property
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   03.06.2004 23:59:10
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public RecordsetObjects.Field this[int lIndex]
		{
			get{
			

			
											   if (EOF | BOF | lRecordcount == 0)
											   {
												   throw (new Exception("no data or bof or eof"));
											   }
			
											   RecordsetObjects.FieldList oFieldList = moGetCurrentRecordNode();
											   return oFieldList[lIndex];
			
										  
			}
		}
		
		//================================================================================
		//Property:  oFieldList
		//--------------------------------------------------------------------------------'
		//Purpose:   returns the fieldlist of the current record
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   21.03.2004 19:56:01
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public RecordsetObjects.FieldList oFields
		{
			get{
				
				if (this.BOF | this.EOF)
				{
					return null;
				}
				else
				{
					return moGetCurrentRecordNode();
				}
				
			}
			
		}
		
		
		
		//================================================================================
		//Property:  oFieldDefList
		//--------------------------------------------------------------------------------'
		//Purpose:   retrievs the fielddeflist without values; can be
		//           used even when eof or bof
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Created:   21.03.2004 20:24:53
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public RecordsetObjects.FieldList oFieldDefList
		{
			get{
				
				
				return moFieldDefList;
				
			}
		}
		
		
		
		//================================================================================
		//Property:  lRecordcount
		//--------------------------------------------------------------------------------'
		//Purpose:   returns the count of RECORD-Nodes
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   21.03.2004 19:57:50
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public int lRecordcount
		{
			get{
				return moFieldLists.Count;
			}
		}
		
		
		//================================================================================
		//Property:  oBookmark
		//--------------------------------------------------------------------------------'
		//Purpose:   gets/sets the bookmark
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   08.04.2004 10:50:26
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public RecordsetObjects.Bookmark oBookmark
		{
			get{
				RecordsetObjects.Bookmark oResult = new RecordsetObjects.Bookmark(this.lCurrent);
				return oResult;
			}
			set
			{
				this.lCurrent = value.lPos;
				if (this.lCurrent > this.lRecordcount - 1)
				{
					throw (new Exception("bookmark not valid anymore"));
				}
			}
		}
		
		//================================================================================
		//Property:  oXml
		//--------------------------------------------------------------------------------'
		//Purpose:   returns the recordset as xml; can be used to load the recordset
		//           via gLoadFromXml again
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   07.04.2004 23:08:07
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public XmlDocument oXml
		{
			get{
				
				Xml.XmlDocument oXmlDocument = new Xml.XmlDocument("<" + efsXmlNode_recordset + "/>");
				XmlNode oRootNode = oXmlDocument.oChildren[0];
				
				//-------append the fields-definition---------
				moFieldDefList.gAppendAsXml(oRootNode);
				
				//-------append the data-fields---------
				for (int i = 0; i <= moFieldLists.Count; i++)
				{
					((RecordsetObjects.FieldList)(moFieldLists[i])).gAppendAsXml(oRootNode);
				}
				
				
				return oXmlDocument;
			}
		}
		
		//================================================================================
		//public methods:
		//================================================================================
		
		//================================================================================
		//Sub:   New
		//--------------------------------------------------------------------------------'
		//Purpose:    constructor; empty recordset
		//--------------------------------------------------------------------------------'
		//Params:    -
		//--------------------------------------------------------------------------------'
		//Created:   21.03.2004 19:52:17
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public Recordset() {
			moFieldLists = new efArrayList();
			
			moFieldDefList = new RecordsetObjects.FieldList(this);
		}
		
		//================================================================================
//Sub:   New
		//--------------------------------------------------------------------------------'
//Purpose:    constructor; empty recordset
		//--------------------------------------------------------------------------------'
//Params:    sXml - the recordset-xml
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 19:52:17
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public Recordset(string sXml) {
			moFieldLists = new efArrayList();
			
			
			moFieldDefList = new RecordsetObjects.FieldList(this);
			
			XmlDocument oXmlDoc = new XmlDocument(sXml);
			gLoadFromXml(oXmlDoc);
			
			
		}
		
		
		
		//================================================================================
//Sub:       gLoadFromXml
		//--------------------------------------------------------------------------------'
//Purpose:   loads a recordset from xml; the xml can be got by sAppendAsXml
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   07.04.2004 23:09:50
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void gLoadFromXml (XmlDocument oXml)
		{
			
			
			//-------the first line contains the field-definitions-------
			moFieldDefList = new RecordsetObjects.FieldList(this);
			
			if (oXml.oChildren[0].sName != efsXmlNode_recordset)
			{
				throw (new efException("Invalid xml for recordset. Expected \"" + efsXmlNode_recordset + "\", found \"" + oXml.oChildren[0].sName + "\"."));
			}
			
			moFieldDefList.gLoadFromXml(oXml.oChildren[0].oChildren[0]);
			
			
			
		}
		
		//================================================================================
//Function:  sSqlInsert
		//--------------------------------------------------------------------------------'
//Purpose:   returns a sql-statement for inserting the record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Returns:   sql-string
		//--------------------------------------------------------------------------------'
//Created:   05.04.2004 18:44:21
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public string gsSqlInsert(string sInsertTableName)
		{
			
			string sInsertFields = "";
			string sInsertValues = "";
			
			for (int i = 0; i <= oFields.Count - 1; i++)
			{
				sInsertFields += oFields[i].sName;
				if (i < oFields.Count - 1)
				{
					sInsertFields += ", ";
				}
			}
			
			
			for (int i = 0; i <= oFields.Count - 1; i++)
			{
				sInsertValues += oFields[i].sGetForSQL();
				if (i < oFields.Count - 1)
				{
					sInsertValues += ", ";
				}
			}
			
			
			string sQry;
			sQry = "INSERT INTO $1($2) VALUES($3)";
			
			sQry = Functions.Replace(sQry, "$1", sInsertTableName);
			sQry = Functions.Replace(sQry, "$2", sInsertFields);
			sQry = Functions.Replace(sQry, "$3", sInsertValues);
			
			return sQry;
			
		}
		
		
		//================================================================================
		//Function:  gsSqlUpdate
		//--------------------------------------------------------------------------------'
		//Purpose:   creates sql-update of recordset object
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Returns:   sql-string
		//--------------------------------------------------------------------------------'
		//Created:   05.04.2004 19:08:35
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public string gsSqlUpdate(string sInsertTablename, string sClause)
		{
			
			string sSetClause = "";
			
			for (int i = 0; i <= oFields.Count - 1; i++)
			{
				sSetClause += oFields[i].sName + "=" + oFields[i].sGetForSQL();
				if (i < oFields.Count - 2)
				{
					sSetClause += ",";
				}
				
			}
			
			
			string sQry;
			sQry = "UPDATE $1 SET $2 $3";
			
			sQry = Functions.Replace(sQry, "$1", sInsertTablename);
			sQry = Functions.Replace(sQry, "$2", sSetClause);
			
			if (!Functions.IsEmptyString(sClause))
			{
				sQry = Functions.Replace(sQry, "$3", " WHERE " + sClause);
			}
			else
			{
				sQry = Functions.Replace(sQry, "$3", "");
			}
			
			return sQry;
		}
		
		
		
		//================================================================================
//Sub:   AddNew
		//--------------------------------------------------------------------------------'
//Purpose:   adds a new record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 20:39:23
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void AddNew ()
		{
			
			RecordsetObjects.FieldList oNewFieldList = new RecordsetObjects.FieldList(this);
			
			//--------copy fields from field-def------------
			for (int i = 0; i <= moFieldDefList.Count - 1; i++)
			{
				oNewFieldList.gAppendField(moFieldDefList[i].sName, moFieldDefList[i].enType, false);
			}
			
			//------------add to array-list of fieldlists------
			moFieldLists.Add(oNewFieldList);
			
			
			//---------set current-record to the new item---------
			lCurrent = lRecordcount - 1;
			
			
		}
		//================================================================================
		//Sub:   Delete
		//--------------------------------------------------------------------------------'
		//Purpose:   adds a new record
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Created:   21.03.2004 20:39:23
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public void Delete ()
		{

			if (!(this.EOF || this.BOF))
			{
				moFieldLists.RemoveAt(lCurrent);
				
			}
			
		}
		
		
		//================================================================================
		//Function:  grsClone
		//--------------------------------------------------------------------------------'
		//Purpose:   makes a copy of the recordset and returns the result
		//--------------------------------------------------------------------------------'
		//Params:
		//--------------------------------------------------------------------------------'
		//Returns:   cloned-recordset object
		//--------------------------------------------------------------------------------'
		//Created:   08.04.2004 10:47:20
		//--------------------------------------------------------------------------------'
		//Changed:
		//--------------------------------------------------------------------------------'
		public Recordset grsClone()
		{
			
			Recordset rsNew = new Recordset();
			
			
			rsNew.gLoadFromXml(this.oXml);
			
			return rsNew;
			
		}
		
		//================================================================================
//Sub:   MoveFirst
		//--------------------------------------------------------------------------------'
//Purpose:   goes to the first record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 22:52:37
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void MoveFirst ()
		{
			lCurrent = 0;
		}
		
		//================================================================================
//Sub:   Move
		//--------------------------------------------------------------------------------'
//Purpose:   moves by value
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 22:55:05
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void Move (int lStep)
		{
			
			lCurrent += lStep;
			if (lCurrent > lRecordcount - 1)
			{
				lCurrent = lRecordcount; //move to EOF
			}
			if (lCurrent < 0)
			{
				lCurrent = -1; //move to BOF
			}
			
		}
		
		//================================================================================
//Sub:   MoveNext
		//--------------------------------------------------------------------------------'
//Purpose:   moves to the next record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 22:55:05
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void MoveNext ()
		{
			
			if (EOF)
			{
				throw (new efException("eof already reached - cannot movenext"));
			}
			lCurrent += 1;
			
		}
		
		//================================================================================
//Sub:   MovePrev
		//--------------------------------------------------------------------------------'
//Purpose:   moves to the previous record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 22:55:02
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void MovePrev ()
		{
			
			if (BOF)
			{
				throw (new efException("bof already reached - cannot movenext"));
			}
			lCurrent -= 1;
			
		}
		
		//================================================================================
//Sub:   MoveLast
		//--------------------------------------------------------------------------------'
//Purpose:   moves to the last record
		//--------------------------------------------------------------------------------'
//Params:
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 22:55:00
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void MoveLast ()
		{
			
			
			lCurrent = lRecordcount - 1;
			
		}
		
		//================================================================================
//Sub:   AppendField
		//--------------------------------------------------------------------------------'
//Purpose:   Adds a new field
		//--------------------------------------------------------------------------------'
//Params:    sName - Name of the field;
		//           enType - FieldType
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 20:08:21
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		public void AppendField (string sName, RecordsetObjects.Field.efEnumFieldType enType)
		{
			
			moFieldDefList.gAppendField(sName, enType, true);
			
			for (int i = 0; i <= moFieldLists.Count - 1; i++)
			{
				RecordsetObjects.FieldList oFieldList = ((RecordsetObjects.FieldList)(moFieldLists[i]));
				
				oFieldList.gAppendField(sName, enType, false);
				
			}
			
		}
		
		
		//================================================================================
		//Private Methods:
		//================================================================================
		
		//================================================================================
//Function:  mGetCurrentRecordNode
		//--------------------------------------------------------------------------------'
//Purpose:   retrieves the current recordnode
		//--------------------------------------------------------------------------------'
//Params:    -
		//--------------------------------------------------------------------------------'
//Returns:   xmlnode
		//--------------------------------------------------------------------------------'
//Created:   21.03.2004 20:46:03
		//--------------------------------------------------------------------------------'
//Changed:
		//--------------------------------------------------------------------------------'
		private RecordsetObjects.FieldList moGetCurrentRecordNode()
		{
			
			if (BOF | EOF)
			{
				throw (new Exception("bof or eof"));
			}
			
			return ((RecordsetObjects.FieldList)(moFieldLists[lCurrent]));
			
		}
		
	}
	
	
	
	
	
}
