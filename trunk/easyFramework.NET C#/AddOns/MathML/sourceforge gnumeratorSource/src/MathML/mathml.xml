<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathML</name>
    </assembly>
    <members>
        <member name="T:MathML.Entity">
            <summary>
            an entity replacement
            </summary>
        </member>
        <member name="T:MathML.EntityDictionary">
            <summary>
            used to resolve mathml entities to characters or strings, as
            specified in (a) mathml dtd. This is essentially a hardcoded 
            dtd, and it exists to dramatically speed up document load time.
            
            Currently, all entries are hardcoded here, but in the future, it
            may be expanded to load the entities from a file.
            </summary>
        </member>
        <member name="M:MathML.EntityDictionary.#ctor">
            <summary>
            static class, nothing done here
            </summary>
        </member>
        <member name="F:MathML.EntityDictionary.entities">
            list of entitiy resolutions.
            these were all auto-generated from the w3c provided xhtml-math11-f.dtd on
            12-13-2003		
        </member>
        <member name="M:MathML.EntityDictionary.GetValue(System.String)">
            <summary>
            get a value for an enttity name. If there is no matching
            entry, return a empty string 
            
            TODO the list is sorted, do a binary search
            </summary>
        </member>
        <member name="T:MathML.MathVariant">
            <summary>
            create an enum for the mathvariant attribute type
            this enum is not in the w3c spec, but this is very frequently
            used, and the use of an enum saves space, is faster, and is far
            less error prone that the use of strings
            </summary>
        </member>
        <member name="T:MathML.Display">
            <summary>
            specifies whether the enclosed MathML expression should be
            rendered in a display style or an in-line style.
            </summary>
        </member>
        <member name="T:MathML.Form">
            <summary>
            The form of a mathml operator
            </summary>
        </member>
        <member name="T:MathML.LengthType">
            <summary>
            define the diferent types of units a length can have
            </summary>
        </member>
        <member name="F:MathML.LengthType.Undefined">
            <summary>
            length type was not declared
            </summary>
        </member>
        <member name="F:MathML.LengthType.Infinity">
            <summary>
            An infinite measurment, this should be the machine limit for a positive number
            </summary>		
        </member>
        <member name="F:MathML.LengthType.Em">
            <summary>
            font relative unit, em height is the maximum distance above the baseline 
            reached by an uppercase symbol. Contrast with x height.
            </summary>
        </member>
        <member name="F:MathML.LengthType.Px">
            <summary>
            size in pixels
            </summary>
        </member>
        <member name="F:MathML.LengthType.In">
            <summary>
            size in inches
            </summary>
        </member>
        <member name="F:MathML.LengthType.Cm">
            <summary>
            size in centi-meters
            </summary>
        </member>
        <member name="F:MathML.LengthType.Mm">
            <summary>
            size in mili-meters
            </summary>
        </member>
        <member name="F:MathML.LengthType.Pt">
            <summary>
            size in points
            </summary>
        </member>
        <member name="F:MathML.LengthType.Pc">
            <summary>
            size in picas
            </summary>
        </member>
        <member name="F:MathML.LengthType.Percentage">
            <summary>
            percentage of another size, this is typically used in table widths
            </summary>
        </member>
        <member name="F:MathML.LengthType.Auto">
            <summary>
            used for table columnwidth attribute.
            The "auto" value means that the column should be as wide as needed, which is the default.
            </summary>
        </member>
        <member name="F:MathML.LengthType.Fit">
            <summary>
            Used for table columnwidth attribute.
            If "fit" is given as a value, the remaining page width after subtracting the 
            widths for columns specified as "auto" and/or specific widths is divided equally 
            among the "fit" columns and this value is used for the column width. If 
            insufficient room remains to hold the contents of the "fit" columns, renderers 
            may linewrap or clip the contents of the "fit" columns.
            </summary>
        </member>
        <member name="T:MathML.Align">
            <summary>
            Alignment type for fractions and tables
            </summary>
        </member>
        <member name="T:MathML.LineStyle">
            <summary>
            line styles for a table
            </summary>
        </member>
        <member name="T:MathML.Occurrence">
            <summary>
            An enum to describe the 'occurrence' type. This is an attribute that 
            can be in the form of prefix, infix, postfix, or function-model.
            </summary>
        </member>
        <member name="F:MathML.Occurrence.Prefix">
            <summary>
            operator should be before the argument
            </summary>
        </member>
        <member name="F:MathML.Occurrence.Infix">
            <summary>
            operator should be in-between the arguments
            </summary>
        </member>
        <member name="F:MathML.Occurrence.Postfix">
            <summary>
            operator should follow the arguments
            </summary>
        </member>
        <member name="F:MathML.Occurrence.FunctionModel">
            <summary>
            arguments should be considered function arguments
            </summary>
        </member>
        <member name="T:MathML.Length">
            <summary>
            define  a length type. All mathml distance mesurments are given as an 
            encoded length string, this sruct is a decoded version of that string.
            </summary>
        </member>
        <member name="M:MathML.Length.#ctor(MathML.LengthType)">
            <summary>
            construct a new Length object. The value is set to 0
            </summary>
            <param name="u"></param>
        </member>
        <member name="M:MathML.Length.#ctor(MathML.LengthType,System.Single)">
            <summary>
            construct a new Length object
            </summary>
            <param name="u">the type of the Length</param>
            <param name="v">the value of the Length</param>
        </member>
        <member name="F:MathML.Length.Type">
            <summary>
            the type of this length
            </summary>
        </member>
        <member name="F:MathML.Length.Value">
            <summary>
            the value of this length
            </summary>
        </member>
        <member name="M:MathML.Length.ToString">
            <summary>
            gets a string representation of this length. note, this method can not be used
            for serializing a length to a dom, use the Utility class instead.
            </summary>
            <returns>a string representation of this length</returns>
        </member>
        <member name="M:MathML.Length.op_Equality(MathML.Length,MathML.Length)">
            <summary>
            Lengths are equal if both the type and values are identical
            </summary>
            <param name="l">a length</param>
            <param name="r">a length</param>
            <returns></returns>
        </member>
        <member name="M:MathML.Length.op_Inequality(MathML.Length,MathML.Length)">
            <summary>
            Lengths are not equal if either the type or value is different
            </summary>
            <param name="l">a Length</param>
            <param name="r">a Length</param>
            <returns></returns>
        </member>
        <member name="M:MathML.Length.Equals(System.Object)">
            <summary>
            override the Equals method to silence the compiler warnings
            </summary>
        </member>
        <member name="M:MathML.Length.GetHashCode">
            <summary>
            override the GetHashCode to silence the compiler warnings.
            </summary>
        </member>
        <member name="P:MathML.Length.NamedSpace">
            <summary>
            determine if this length is one of the predifined named space items.
            </summary>
        </member>
        <member name="P:MathML.Length.HorizontalUnit">
            <summary>
            determine if this length is a valid h-unit type
            </summary>
        </member>
        <member name="P:MathML.Length.VerticalUnit">
            <summary>
            determine if this length type is a valid v-unit type
            </summary>
        </member>
        <member name="P:MathML.Length.Fixed">
            <summary>
            Is this length evaluateable to a fixed number, i.e. this value is NOT
            a scaled percentage of another value, is NOT auto or Fit. 
            </summary>
        </member>
        <member name="T:MathML.MathMLActionElement">
            <summary>
            This interface extends the MathMLPresentationContainer interface for 
            the MathML enlivening expression element maction.
            
            There are many ways in which it might be desirable to make mathematical 
            content active. Adding a link to a MathML sub-expression is one basic kind 
            of interactivity. See Section 7.1.4. However, many other kinds of 
            interactivity cannot be easily accommodated by generic linking mechanisms. 
            For example, in lengthy mathematical expressions, the ability to ‘fold’ 
            xpressions might be provided, i.e. a renderer might allow a reader to 
            toggle between an ellipsis and a much longer expression that it	represents.
            
            To provide a mechanism for binding actions to expressions, MathML provides 
            the maction element. This element accepts any number of sub-expressions as
            arguments.
            </summary>
            <remarks>
            <para>A suggested list of actiontypes and their associated actions is given below. 
            Keep in mind, however, that this list is mainly for illustration, and recognized 
            values and behaviors will vary from application to application.</para> 
            <para><c>&lt;maction actiontype="toggle" selection="positive-integer"&gt;
            (first expression) (second expression)... &lt;/maction&gt;</c>
            For this action type, a renderer would alternately display the given expressions, 
            cycling through them when a reader clicked on the active expression, starting
            with the selected expression and updating the selection attribute value as described above. 
            Typical uses would be for exercises in education, ellipses in long computer algebra output, 
            or to illustrate alternate notations. Note that the expressions may be of significantly 
            different size, so that size negotiation with the browser may be desirable. 
            If size negotiation is not available, scrolling, elision, panning, or some other method 
            may be necessary to allow full viewing.</para>
            <para><c>&lt;maction actiontype="statusline"&gt; (expression) (message) &lt;/maction&gt;</c>
            In this case, the renderer would display the expression in context on the screen. 
            When a reader clicked on the expression or moved the mouse over it, the renderer would send 
            a rendering of the message to the browser statusline. Since most browsers in the foreseeable 
            future are likely to be limited to 	displaying text on their statusline, authors would 
            presumably use plain text in an mtext element for the message in most circumstances. For 
            non-mtext messages, renderers might provide a natural language translation of the markup, 
            but this is not required.</para>
            <para><c>&lt;maction actiontype="tooltip"&gt; (expression) (message) &lt;/maction&gt;</c>
            Here the renderer would also display the expression in context on the screen. 
            When the mouse pauses over the expression for a long enough delay time,
            the renderer displays a rendering of the message in a pop-up ‘tooltip’ box near the expression. 
            These message boxes are also sometimes called ‘balloon help’ boxes. Presumably authors would 
            use plain text in an mtext element for the message in most circumstances. For non-mtext messages, 
            renderers may provide a natural language translation of the markup if full MathML rendering 
            is not practical, but this is not required.</para>
            <para><c>&lt;maction actiontype="highlight" my:color="red" my:background="yellow"&gt; expression 
            &lt;/maction&gt;</c>
            In this case, a renderer might highlight the enclosed expression on a ‘mouse-over’ event. In the 
            example given above, non-standard attributes from another namespace are being used to pass additional 
            information to renderers that support them, without violating the MathML DTD (see Section 7.2.3). The
            my:color attribute changes the color of the characters in the presentation, while the my:background 
            attribute changes the color of the background behind the characters.</para>
            <para><c>&lt;maction actiontype="menu" selection="1" &gt; (menu item 1) (menu item 2) ... &lt;/maction&gt;</c>
            This action type instructs a renderer to provide a pop up menu. This allows a one-to-many 
            linking capability. Note that the menu items may be other 
            <c>&lt;action actiontype="menu"&gt;...&lt;/maction&gt;</c> expressions, thereby allowing nested menus. 
            It is assumed that the user choosing a menu item would invoke some kind of action associated 
            with that item. Such action might be completely handled by the renderer itself or it might trigger 
            some kind of event within the browser that could be linked to other programming logic.</para>
            </remarks>
        </member>
        <member name="T:MathML.MathMLPresentationContainer">
            <summary>
            This interface represents MathML Presentation elements that may contain 
            arbitrarily many child elements. Elements directly supported by this 
            interface include mrow,	mphantom and merror. All attributes and methods 
            are derived from the base MathMLPresentationElement and MathMLContainer interfaces.
            </summary>
        </member>
        <member name="T:MathML.MathMLPresentationElement">
            <summary>
            This interface is provided to serve as a base interface for various MathML 
            Presentation interfaces. It contains no new attributes or methods at 
            this time; however, it is felt that the distinction between Presentation 
            and Content MathML entities should be indicated in the MathMLElement hierarchy. 
            In particular, future versions of the MathML DOM may add functionality on 
            this interface; it may also serve as an aid to implementors.
            </summary>
        </member>
        <member name="T:MathML.MathMLElement">
            <summary>
            The base of all mathml elements.
            </summary>
            <remarks>
            In order to facilitate use with style sheet mechanisms such as [XSLT] and [CSS2] 
            all MathML elements accept class, style, and id attributes in addition to the
            attributes described specifically for each element. MathML renderers not supporting 
            CSS may ignore these attributes. MathML specifies these attribute values as
            general strings, even if style sheet mechanisms have more restrictive syntaxes for them. 
            That is, any value for them is valid in MathML.
            </remarks>
        </member>
        <member name="M:MathML.MathMLElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            A way for a node to process a visitor. The visitor pattern allows the development
            of a wide variety of actions (rendering, compiling, etc...) to be applied to a 
            node hierachy without adding code to the actuall MathMLElements, thus keeping the
            element hierarchy pure and conforming to the published specification.
            
            This is an extension to the w3c published specification.
            The descision to include this method was not taken lightly, as one of the goals
            of this probject is to implement the offcial w3c spec as closely as possible.
            </summary>
        </member>
        <member name="M:MathML.MathMLElement.SetUserData(System.String,System.Object,MathML.UserDataHandler)">
            <summary>
            setUserData introduced in DOM Level 3
            Associate an object to a key on this node. The by calling getUserData with the same key.
            </summary>
            <param name="key">The key to associate the object to.</param>
            <param name="data">The object to associate to the given key, or null to remove 
            any existing association to that key.</param>
            <param name="handler">The handler to associate to that key, or null.</param>
            <returns>the user data previously associated to the given key on this node, or 
            null if there was none.</returns>
        </member>
        <member name="M:MathML.MathMLElement.GetUserData(System.String)">
            <summary>
            getUserData introduced in DOM Level 3
            Retrieves the object associated to a key on a this node. The object must first have 
            been set to this node by calling setUserData with the same key.
            </summary>
            <param name="key">The key the object is associated to.</param>
            <returns>the DOMUserData associated to the given key on this node, 
            or null if there was none.</returns>
        </member>
        <member name="M:MathML.MathMLElement.SelectChildNode(System.String)">
            <summary>
            internal method to find a child node with the given tag name.
            this method should be faster than the SelectSingleNode method, as
            there is no xpath expression to parse. In MathML, most relationships
            are to first level child nodes, so this is an optimization.
            </summary>
            <param name="tagName">The tag name to search for</param>
            <returns>The first child node matching the tag name, null otherwise</returns>
        </member>
        <member name="P:MathML.MathMLElement.ClassName">
            <summary>
            The class attribute of the element. See the discussion elsewhere in the mathml specificaiton document 
            of the class attribute; see also the HTML definition of this attribute. 
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.MathElementStyle">
            <summary>
            A string identifying the element’s style attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.Id">
            <summary>
            The element’s identifier. See the discussion elsewhere in the mathml specification document of 
            the id attribute; see also the HTML definition.
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.Xref">
            <summary>
            The xref attribute of the element. See the discussion elsewhere in mathml specification document 
            of the xref attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.Href">
            <summary>
            The xlink:href attribute of the element. See the discussion elsewhere in the mathml specification 
            document of the xlink:href attribute; see also the definition of this attribute in the XLink specification.
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.OwnerMathElement">
            <summary>
            The MathMLMathElement corresponding to the nearest math element ancestor of this element.
            Should be null if this element is a top-level math element.
            </summary>
        </member>
        <member name="P:MathML.MathMLElement.EmbelishedOperator">
            <summary>
            An extension to the w3c published DOM specification, this is NOT
            in the published spec. 
            
            An mo element that is ‘embellished’ by one or more nested subscripts, superscripts, 
            surrounding text or whitespace, or style changes is an embellished operator. 
            The embellished operator as a whole (this is defined precisely, below) whose
            position in an mrow is examined by the above rules and whose surrounding spacing is 
            affected by its form, not the mo element at its core; however, the attributes
            influencing this surrounding spacing are taken from the mo element at the core 
            (or from that element’s dictionary entry). 
            
            <pre>
            The precise definition of an ‘embellished operator’ is: 
            1: an mo element;
            2: one of the elements msub, msup, msubsup, munder, mover, munderover, mmultiscripts, 
               mfrac, or semantics (Section 4.2.6), whose first argument exists and is an embellished 
               operator;
            3: one of the elements mstyle, mphantom, or mpadded, such that an mrow containing the 
               same arguments would be an embellished operator;
            4: an maction element whose selected sub-expression exists and is an embellished operator;
            5: an mrow whose arguments consist (in any order) of one embellished operator and zero or 
               more space-like elements.
            </pre>
              
            Note that this definition permits nested embellishment only when there are no intervening 
            enclosing elements not in the above list.
            
            returns null if this is not an embelished operator, the operator that is being
            embelished otherwise.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="T:MathML.MathMLContainer">
            <summary>
            This is an abstract interface containing functionality required by MathML elements that 
            may contain arbitrarily many child elements. No elements are directly supported
            by this interface; all instances are instances of either MathMLPresentationContainer, 
            MathMLContentContainer, or MathMLMathElement.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.GetArgument(System.Int32)">
            <summary>
            This method returns the indexth child argument element of this element. 
            This frequently differs from the value of Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.SetArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method sets newArgument as the index-th argument of this element. 
            If there is currently an index-th argument, it is replaced by newArgument.
            This frequently differs from setting the node at Node::childNodes().item(index), 
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.InsertArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method inserts newArgument before the current index-th argument of this 
            element. If index is 0, or if index is one more than the current number
            of arguments, newArgument is appended as the last argument. This frequently 
            differs from setting the node at Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.DeleteArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element. 
            Note that child elements which are qualifier elements or declare
            elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.RemoveArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element, 
            and returns it to the caller. Note that child elements that are qualifier
            elements or declare elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.GetDeclaration(System.Int32)">
            <summary>
            This method retrieves the index-th child declare element of this element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.SetDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration as the index-th child declaration of this element. 
            If there is already an index-th declare child element, it is replaced by newDeclaration.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.InsertDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration before the current index-th child declare element 
            of this element. If index is 0, newDeclaration is appended as the last child declare element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.RemoveDeclaration(System.Int32)">
            <summary>
            This method removes the MathMLDeclareElement representing the index-th declare child 
            element of this element, and returns it to the caller. Note that index is the position 
            in the list of declare element children, as opposed to the position in the list of all 
            child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainer.DeleteDeclaration(System.Int32)">
            <summary>
            This method deletes the MathMLDeclareElement representing the index-th declare child 
            element of this element. Note that index is the position in the list of declare 
            element children, as opposed to the position in the list of all child Nodes.
            </summary>
        </member>
        <member name="P:MathML.MathMLContainer.ArgumentCount">
            <summary>
            The number of child elements of this element which represent arguments of the element, 
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer 
            it does not contain elements representing bound variables, conditions, separators, 
            degrees, or upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit).
            </summary>
        </member>
        <member name="P:MathML.MathMLContainer.Arguments">
            <summary>
            This attribute accesses the child MathMLElements of this element which are arguments 
            of it, as a MathMLNodeList. Note that this list does not contain any MathMLElements 
            representing qualifier elements or declare elements.
            </summary>
        </member>
        <member name="P:MathML.MathMLContainer.Declarations">
            <summary>
            Provides access to the declare elements which are children of this element, 
            in a MathMLNodeList. All Nodes in this list must be MathMLDeclareElements.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>        
        </member>
        <member name="M:MathML.MathMLPresentationContainer.GetArgument(System.Int32)">
            <summary>
            This method returns the indexth child argument element of this element. 
            This frequently differs from the value of Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.SetArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method sets newArgument as the index-th argument of this element. 
            If there is currently an index-th argument, it is replaced by newArgument.
            This frequently differs from setting the node at Node::childNodes().item(index), 
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.InsertArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method inserts newArgument before the current index-th argument of this 
            element. If index is 0, or if index is one more than the current number
            of arguments, newArgument is appended as the last argument. This frequently 
            differs from setting the node at Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.DeleteArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element. 
            Note that child elements which are qualifier elements or declare
            elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.RemoveArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element, 
            and returns it to the caller. Note that child elements that are qualifier
            elements or declare elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.GetDeclaration(System.Int32)">
            <summary>
            This method retrieves the index-th child declare element of this element.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.SetDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration as the index-th child declaration of this element. 
            If there is already an index-th declare child element, it is replaced by newDeclaration.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.InsertDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration before the current index-th child declare element 
            of this element. If index is 0, newDeclaration is appended as the last child declare element.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.RemoveDeclaration(System.Int32)">
            <summary>
            This method removes the MathMLDeclareElement representing the index-th declare child 
            element of this element, and returns it to the caller. Note that index is the position 
            in the list of declare element children, as opposed to the position in the list of all 
            child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.DeleteDeclaration(System.Int32)">
            <summary>
            This method deletes the MathMLDeclareElement representing the index-th declare child 
            element of this element. Note that index is the position in the list of declare 
            element children, as opposed to the position in the list of all child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationContainer.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationContainer.ArgumentCount">
            <summary>
            The number of child elements of this element which represent arguments of the element, 
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer 
            it does not contain elements representing bound variables, conditions, separators, 
            degrees, or upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit).
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationContainer.Arguments">
            <summary>
            This attribute accesses the child MathMLElements of this element which are arguments 
            of it, as a MathMLNodeList. Note that this list does not contain any MathMLElements 
            representing qualifier elements or declare elements.
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationContainer.Declarations">
            <summary>
            Provides access to the declare elements which are children of this element, 
            in a MathMLNodeList. All Nodes in this list must be MathMLDeclareElements.
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationContainer.EmbelishedOperator">
            <summary>
            Implement rules 3 and 5 of the definition of an embelished operator.
            As many container types use these rules, this is the one place that
            the rule is implemented.
            </summary>
        </member>
        <member name="M:MathML.MathMLActionElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLActionElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLActionElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLActionElement.ActionType">
            <summary>
            A string specifying the action. Possible values include toggle, 
            statusline, tooltip, highlight, and menu.
            </summary>
        </member>
        <member name="P:MathML.MathMLActionElement.Selection">
            <summary>
            A string specifying an integer that selects the current subject of the action.
            </summary>
        </member>
        <member name="P:MathML.MathMLActionElement.Color">
            <summary>
            not part of w3c standard, but most renderers, especially design sciences use this attribute
            </summary>
        </member>
        <member name="P:MathML.MathMLActionElement.Background">
            <summary>
            not part of w3c standard, but most renderers, especially design sciences use this attribute
            </summary>
        </member>
        <member name="T:MathML.MathMLAlignGroupElement">
            <summary>
            This interface extends the MathMLPresentationElement 
            interface for the MathML group -alignment element maligngroup.
            </summary>
        </member>
        <member name="M:MathML.MathMLAlignGroupElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLAlignGroupElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLAlignMarkElement">
            <summary>
            This interface extends the MathMLPresentationElement interface 
            for the MathML alignment mark element malignmark.
            </summary>
        </member>
        <member name="M:MathML.MathMLAlignMarkElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLAlignMarkElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLAnnotationElement">
            <summary>
            This interface represents the annotation element of MathML.
            </summary>
        </member>
        <member name="M:MathML.MathMLAnnotationElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLAnnotationElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLApplyElement">
            <summary>
            The apply element allows a function or operator to be applied to its arguments.
            </summary>
        </member>
        <member name="T:MathML.MathMLContentContainer">
            <summary>
            This interface supports the MathML Content elements that may contain 
            child Content elements. The elements directly supported by 
            MathMLContentContainer include: reln (deprecated), lambda, lowlimit, 
            uplimit, degree, domainofapplication, and momentabout. Interfaces 
            derived from MathMLContentContainer support the elements apply, fn, 
            interval, condition, declare, bvar, set, list, vector, matrix, and matrixrow.
            </summary>
        </member>
        <member name="T:MathML.MathMLContentElement">
            <summary>
            This interface is provided to serve as a base interface for various 
            MathML Content interfaces. It contains no new attributes or methods 
            at this time; however, it is felt that the distinction between 
            Presentation and Content MathML entities should be indicated in 
            the MathMLElement hierarchy. In particular, future versions of the
            MathML DOM may add functionality on this interface; it may also 
            serve as an aid to implementors.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="F:MathML.MathMLContentContainer.container">
            <summary>
            implementation of the MathMLContainer interface
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLContentContainer.GetBoundVariable(System.Int32)">
            <summary>
            This method retrieves the index-th MathMLBvarElement child of the MathMLElement. 
            Note that only bvar child elements are counted in determining the index-th bound variable.
            Parameters
            int index The one-based index into the bound variable children of this element of the 
            MathMLBvarElement to be retrieved.
            Return value MathMLBvarElement The MathMLBvarElement representing the index-th bvar 
            child of this element.
            This method raises no exceptions.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.InsertBoundVariable(MathML.MathMLBvarElement,System.Int32)">
            <summary>
            This method inserts a MathMLBvarElement as a child node before the current 
            index-th bound variable child of this MathMLElement. If index is 0,
            newBVar is appended as the last bound variable child. This has the effect 
            of adding a bound variable to the expression this element represents. Note 
            that the new bound variable is inserted as the index-th bvar child node, 
            not necessarily as the index-th child node. The point of the method is to allow
            insertion of bound variables without requiring the caller to calculate the 
            exact order of child qualifier elements.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.SetBoundVariable(MathML.MathMLBvarElement,System.Int32)">
            <summary>
            This method sets the index-th bound variable child of this MathMLElement 
            to newBVar. This has the effect of setting a bound variable in the expression
            this element represents. Note that the new bound variable is inserted as the 
            index-th bvar child node, not necessarily as the index-th child node. The
            point of the method is to allow insertion of bound variables without 
            requiring the caller to calculate the exact order of child qualifier elements. 
            If there is already a bvar at the index-th position, it is replaced by newBVar.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.DeleteBoundVariable(System.Int32)">
            <summary>
            This method deletes the index-th MathMLBvarElement child of the MathMLElement. 
            This has the effect of removing this bound variable from the list of
            qualifiers affecting the element this represents.
            </summary>
            <param name="index">The one-based index into the bound variable children of this 
            element of the MathMLBvarElement to be removed.</param>
        </member>
        <member name="M:MathML.MathMLContentContainer.RemoveBoundVariable(System.Int32)">
            <summary>
            This method removes the index-th MathMLBvarElement child of the MathMLElement 
            and returns it to the caller. This has the effect of removing this
            bound variable from the list of qualifiers affecting the element this represents.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.GetArgument(System.Int32)">
            <summary>
            This method returns the indexth child argument element of this element. 
            This frequently differs from the value of Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.SetArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method sets newArgument as the index-th argument of this element. 
            If there is currently an index-th argument, it is replaced by newArgument.
            This frequently differs from setting the node at Node::childNodes().item(index), 
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.InsertArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method inserts newArgument before the current index-th argument of this 
            element. If index is 0, or if index is one more than the current number
            of arguments, newArgument is appended as the last argument. This frequently 
            differs from setting the node at Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.DeleteArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element. 
            Note that child elements which are qualifier elements or declare
            elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.RemoveArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element, 
            and returns it to the caller. Note that child elements that are qualifier
            elements or declare elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.GetDeclaration(System.Int32)">
            <summary>
            This method retrieves the index-th child declare element of this element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.SetDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration as the index-th child declaration of this element. 
            If there is already an index-th declare child element, it is replaced by newDeclaration.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.InsertDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration before the current index-th child declare element 
            of this element. If index is 0, newDeclaration is appended as the last child declare element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.RemoveDeclaration(System.Int32)">
            <summary>
            This method removes the MathMLDeclareElement representing the index-th declare child 
            element of this element, and returns it to the caller. Note that index is the position 
            in the list of declare element children, as opposed to the position in the list of all 
            child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.DeleteDeclaration(System.Int32)">
            <summary>
            This method deletes the MathMLDeclareElement representing the index-th declare child 
            element of this element. Note that index is the position in the list of declare 
            element children, as opposed to the position in the list of all child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentContainer.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.BoundVariables">
            <summary>
            nBoundVariables of type unsigned long, readonly The number of bvar child 
            elements of this element.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.Condition">
            <summary>
            This attribute represents the condition child element of this node. 
            DOMException HIERARCHY_REQUEST_ERR: Raised if this element does not permit a 
            child condition element. In particular, raised if this element	
            is not a apply, set, or list.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.OpDegree">
            <summary>
            This attribute represents the degree child element of this node. 
            This expresses, for instance, the degree of differentiation if this
            element is a bvar child of an apply element whose first child is a 
            diff or partialdiff. If this is an apply element whose first child 
            is a partialdiff, the OpDegree attribute, if present, represents 
            the total degree of differentiation. See Section 4.2.3.2.
            DOMException HIERARCHY_REQUEST_ERR: Raised if this element does not 
            permit a child degree element. In particular, raised if this element is not
            a bvar or apply
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.DomainOfApplication">
            <summary>
            This attribute represents the domainofapplication child element of this node, 
            if present. This may express, for instance, the domain of integration if 
            this element is an apply element whose first child is an integral operator 
            (int). See Section 4.2.3.2. DOMException HIERARCHY_REQUEST_ERR: Raised if 
            this element does not permit a child domainofapplication element.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.MomentAbout">
            <summary>
            This attribute represents the momentabout child element of this node, 
            if present. This typically expresses the point about which a statistical 
            moment is to be calculated, if this element is an apply element whose 
            first child is a moment. See Section 4.2.3.2. DOMException HIERARCHY_REQUEST_ERR: 
            Raised if this element does not permit a child momentabout element. 
            In particular, raised if this element is not an apply whose first child is a moment.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.ArgumentCount">
            <summary>
            The number of child elements of this element which represent arguments of the element, 
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer 
            it does not contain elements representing bound variables, conditions, separators, 
            degrees, or upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit).
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.Arguments">
            <summary>
            This attribute accesses the child MathMLElements of this element which are arguments 
            of it, as a MathMLNodeList. Note that this list does not contain any MathMLElements 
            representing qualifier elements or declare elements. 
            </summary>
        </member>
        <member name="P:MathML.MathMLContentContainer.Declarations">
            <summary>
            Provides access to the declare elements which are children of this element, 
            in a MathMLNodeList. All Nodes in this list must be MathMLDeclareElements.
            </summary>
        </member>
        <member name="M:MathML.MathMLApplyElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLApplyElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLApplyElement.Operator">
            <summary>
            The MathML element representing the function or operator that is applied to the list of arguments.
            </summary>
        </member>
        <member name="P:MathML.MathMLApplyElement.DomainOfApplication">
            <summary>
            This attribute represents the domainofapplication child element of this node (if any). 
            This expresses, for instance, the domain of integration if this is an apply element 
            whose first child is a int. See Section 4.2.3.2. DOMException HIERARCHY_REQUEST_ERR: 
            Raised if this element does not permit a child domainofapplication element.
            </summary>
        </member>
        <member name="P:MathML.MathMLApplyElement.LowLimit">
            <summary>
            This attribute represents the lowlimit child element of this node (if any). 
            This expresses, for instance, the lower limit of integration if this is an apply element 
            whose first child is a int. See Section 4.2.3.2. DOMException HIERARCHY_REQUEST_ERR: 
            Raised if this element does not permit a child lowlimit element. In particular, 
            raised if this element is not an apply element whose first child is an int, sum, product, 
            or limit element.
            </summary>
        </member>
        <member name="P:MathML.MathMLApplyElement.UpLimit">
            <summary>
            This attribute represents the uplimit child element of this node (if any). This expresses, 
            for instance, the upper limit of integration if this is an apply element whose first child 
            is a int. See Section 4.2.3.2. DOMException HIERARCHY_REQUEST_ERR: Raised if this element 
            does not permit a child uplimit element. In particular, raised if this element is not an 
            apply element whose first child is an int, sum, or product element.
            </summary>
        </member>
        <member name="T:MathML.MathMLArgumentsEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MathML.MathMLArgumentsEnumerator.#ctor(MathML.MathMLElement)">
            <summary>
            create the enumerator. the enumerator is initially created with the
            current element set before the collection
            </summary>
            <param name="p">the parent node</param>
        </member>
        <member name="M:MathML.MathMLArgumentsEnumerator.MoveNext">
            <summary>
            move the the next valid type, skipping over any invalid nodes
            </summary>
            <returns>true if there is a next node, false otherwise</returns>
        </member>
        <member name="M:MathML.MathMLArgumentsEnumerator.InvalidType(System.Xml.XmlNode)">
            <summary>
            tests if a node is a valid type or not, as defined in the mathml spec
            </summary>
            <param name="n">a node to test</param>
            <returns>true if the node is invalid, false if the node is valid</returns>
        </member>
        <member name="M:MathML.MathMLArgumentsEnumerator.MoveFirst">
            <summary>
            move the current node to the first position
            </summary>
        </member>
        <member name="T:MathML.MathMLArgumentsList">
            <summary>
            An list that enumerates all child nodes of an element that are not
            of type x
            
            The number of child elements of this element which represent arguments of the element,
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer it does 
            not contain elements representing bound variables, conditions, separators, degrees, or 
            upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit). Note that 
            presentation elements should not contain any of these types anyway ???
            
            node types that will have a arguments property:
            1: direct classes that implent MathMLContainer:
            	MathMLPresentationContainer, 
            	MathMLContentContainer, 
            	MathMLMathElement
            2: concrete classes derived from these:
            
            MathMLPresentationContainer
             |-> MathMLActionElement
             |-> MathMLEncloseElement
             |-> MathMLFencedElement
             |-> MathMLPaddedElement
             |-> MathMLStyleElement
              -> MathMLTableCellElement
             
             MathMLContentContainer
             |-> MathMLApplyElement
             |-> MathMLBvarElement
             |-> MathMLFnElement
             |-> MathMLLambdaElement
             |-> MathMLListElement
              -> MathMLSetElement
            	
            In the case of an apply element, the first child of that type is the opperator, 
            and is not considered an argument. 
            </summary>
        </member>
        <member name="T:MathML.MathMLNodeList">
            <summary>
            This interface is provided as a specialization of the NodeList interface. 
            The child Nodes of this NodeList must be MathMLElements or Text nodes. Note that
            MathMLNodeLists are frequently used in the DOM as values of readonly attributes, 
            encapsulating, for instance, various collections of child elements. When
            used in this way, these objects are always understood to be live, in the sense 
            that changes to the document are immediately reflected in them.
            </summary>
        </member>
        <member name="T:MathML.MathMLBvarElement">
            <summary>
            This interface represents the MathML bound variable element bvar. 
            The interface currently provides no functionality beyond that of 
            MathMLContentContainer, but is useful for defining the type of bound 
            variable access functions.
            </summary>
        </member>
        <member name="M:MathML.MathMLBvarElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLBvarElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLCaseElement">
            <summary>
            The piece element represents one of a sequence of cases used in the piecewise 
            definition of a function. It contains two child elements, each represented by a
            MathMLContentElement. The first child determines the subset of the domain 
            affected, normally by giving a condition to be satisfied. The second gives 
            the value of the function over the indicated subset of its domain.
            </summary>
        </member>
        <member name="M:MathML.MathMLCaseElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLCaseElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLCiElement">
            <summary>
            The ci element is used to specify a symbolic name.
            </summary>
        </member>
        <member name="T:MathML.MathMLContentToken">
            <summary>
            This is the interface from which the interfaces representing the 
            MathML Content token elements (ci, cn and csymbol) are derived. 
            These elements may contain MathML Presentation elements, Text nodes, 
            or a combination of both. Thus the getArgument and insertArgument 
            methods have been provided to deal with this distinction between 
            these elements and other MathML Content elements.
            </summary>
        </member>
        <member name="F:MathML.MathMLContentToken.arguments">
            <summary>
            keep an argument list arround for the lifetime of this class
            it is probably more efficient to keep one of these around instead
            of new'ing one each time it is needed, as this was, we create a new instance
            only once, and the garbage collector only needs to keep track of it, as apposed
            to creating a new one each time.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentToken.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLContentToken.GetArgument(System.Int32)">
            <summary>
            A convenience method to retrieve the child argument at the position referenced by 
            index. Note that this is not necessarily the same as the index-th child
            Node of this Element; in particular, sep elements will not be counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentToken.InsertArgument(System.Int32,System.Xml.XmlNode)">
            <summary>
            A convenience method to insert newArgument before the current index-th argument 
            child of this element. If index is 0, newArgument is appended as the last argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentToken.SetArgument(System.Int32,System.Xml.XmlNode)">
            <summary>
            A convenience method to set an argument child at the position referenced by index. 
            If there is currently an argument at this position, it is replaced by
            newArgument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentToken.DeleteArgument(System.Int32)">
            <summary>
            A convenience method to delete the argument child located at the position 
            referenced by index.
            </summary>
        </member>
        <member name="M:MathML.MathMLContentToken.RemoveArgument(System.Int32)">
            <summary>
            A convenience method to delete the argument child located at the position .
            referenced by index, and to return it to the caller.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentToken.Arguments">
            <summary>
            The arguments of this element, returned as a MathMLNodeList. Note that this is 
            not necessarily the same as Node::childNodes, particularly in the case of the cn 
            element. The reason is that the sep elements that are used to separate the 
            arguments of a cn are not returned.
            </summary>
        </member>
        <member name="P:MathML.MathMLContentToken.DefinitionURL">
            <summary>
            A URI pointing to a semantic definition for this content element. Note that there 
            is no stipulation about the form this definition may take!
            </summary>
        </member>
        <member name="P:MathML.MathMLContentToken.Encoding">
            <summary>
            A string describing the syntax in which the definition located at definitionURL is given.
            </summary>
        </member>
        <member name="M:MathML.MathMLCiElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLCiElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLCiElement.Type">
            <summary>
            Values include integer, rational, real, float, complex, complex-polar, complex-cartesian, 
            constant, any of the MathML content container types (vector, matrix, set, list etc.) or their types.
            </summary>
        </member>
        <member name="T:MathML.MathMLCnElement">
            <summary>
            The cn element is used to specify actual numeric constants.
            </summary>
        </member>
        <member name="M:MathML.MathMLCnElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLCnElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLCnElement.Type">
            <summary>
            Values include, but are not restricted to, e-notation, integer, rational, real, float, complex,
            complex-polar, complexcartesian, and constant.
            </summary>
        </member>
        <member name="P:MathML.MathMLCnElement.Base">
            <summary>
            base of type DOMString A string representing an integer between 2 and 36; 
            the base of the numerical representation.
            </summary>
        </member>
        <member name="P:MathML.MathMLCnElement.NumArgs">
            <summary>
            nargs of type unsigned long, readonly The number of sep-separated arguments.
            </summary>
        </member>
        <member name="T:MathML.MathMLConditionElement">
            <summary>
            The condition element is used to place a condition on one or more 
            free variables or identifiers.
            </summary>
        </member>
        <member name="M:MathML.MathMLConditionElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLConditionElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLContainerImpl">
            <summary>
            implementation of a mathml container. this class is
            used by all classes that implement the MathMLContainer 
            interface.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.GetArgument(System.Int32)">
            <summary>
            This method returns the indexth child argument element of this element. 
            This frequently differs from the value of Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.SetArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method sets newArgument as the index-th argument of this element. 
            If there is currently an index-th argument, it is replaced by newArgument.
            This frequently differs from setting the node at Node::childNodes().item(index), 
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.InsertArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method inserts newArgument before the current index-th argument of this 
            element. If index is 0, or if index is one more than the current number
            of arguments, newArgument is appended as the last argument. This frequently 
            differs from setting the node at Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.DeleteArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element. 
            Note that child elements which are qualifier elements or declare
            elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.RemoveArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element, 
            and returns it to the caller. Note that child elements that are qualifier
            elements or declare elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.GetDeclaration(System.Int32)">
            <summary>
            This method retrieves the index-th child declare element of this element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.SetDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration as the index-th child declaration of this element. 
            If there is already an index-th declare child element, it is replaced by newDeclaration.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.InsertDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration before the current index-th child declare element 
            of this element. If index is 0, newDeclaration is appended as the last child declare element.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.RemoveDeclaration(System.Int32)">
            <summary>
            This method removes the MathMLDeclareElement representing the index-th declare child 
            element of this element, and returns it to the caller. Note that index is the position 
            in the list of declare element children, as opposed to the position in the list of all 
            child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLContainerImpl.DeleteDeclaration(System.Int32)">
            <summary>
            This method deletes the MathMLDeclareElement representing the index-th declare child 
            element of this element. Note that index is the position in the list of declare 
            element children, as opposed to the position in the list of all child Nodes.
            </summary>
        </member>
        <member name="P:MathML.MathMLContainerImpl.ArgumentCount">
            <summary>
            The number of child elements of this element which represent arguments of the element, 
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer 
            it does not contain elements representing bound variables, conditions, separators, 
            degrees, or upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit).
            </summary>
        </member>
        <member name="P:MathML.MathMLContainerImpl.Arguments">
            <summary>
            This attribute accesses the child MathMLElements of this element which are arguments 
            of it, as a MathMLNodeList. Note that this list does not contain any MathMLElements 
            representing qualifier elements or declare elements.
            </summary>
        </member>
        <member name="P:MathML.MathMLContainerImpl.Declarations">
            <summary>
            Provides access to the declare elements which are children of this element, 
            in a MathMLNodeList. All Nodes in this list must be MathMLDeclareElements.
            </summary>
        </member>
        <member name="T:MathML.MathMLCsymbolElement">
            <summary>
            This interface represents the csymbol element. Although it currently has 
            no attributes or methods distinct from those of MathMLContentToken, 
            a separate interface is provided to emphasize the conceptual role of the 
            csymbol element.
            </summary>
        </member>
        <member name="M:MathML.MathMLCsymbolElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLCsymbolElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLDeclarationsList">
            <summary>
            An list that enumerates all child nodes of an element that are MathMLDeclarations
            </summary>
        </member>
        <member name="T:MathML.MathMLDeclareElement">
            <summary>
            The declare construct has two primary roles. The first is to change or set 
            the default attribute values for a specific mathematical object. The second 
            is to establish	an association between a ‘name’ and an object.
            </summary>
        </member>
        <member name="M:MathML.MathMLDeclareElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLDeclareElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.Type">
            <summary>
            A string indicating the type of the identifier. It must be compatible with the type of the 
            constructor, if a constructor is present. The type is inferred from the constructor if present, 
            otherwise it must be specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.NumArgs">
            <summary>
            If the identifier is a function, this attribute specifies the number of arguments the function 
            takes. This represents the declare element’s nargs attribute; see Section 4.4.2.8.
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.Occurrence">
            <summary>
            A string with the values prefix, infix, postfix, or function-model.
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.DefinitionURL">
            <summary>
            A URI specifying the detailed semantics of the element. 
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.Encoding">
            <summary>
            A description of the syntax used in definitionURL.
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.Identifier">
            <summary>
            A MathMLCiElement representing the name being declared.
            this should allways be the first child node
            </summary>
        </member>
        <member name="P:MathML.MathMLDeclareElement.Constructor">
            <summary>
            An optional MathMLElement providing an initial value for the object being declared.
            </summary>
        </member>
        <member name="T:MathML.MathMLDocument">
            <summary>
            This interface extends the XmlDocument interface to add access to document 
            properties relating to navigation. The documentElement attribute for a 
            MathMLDocument should be the MathMLMathElement representing the top-level 
            math element which is the root of the document
            </summary>
        </member>
        <member name="M:MathML.MathMLDocument.#ctor">
            <summary>
            create a new MathML document
            </summary>
        </member>
        <member name="M:MathML.MathMLDocument.Load(System.String)">
            <summary>
            load the document from the a file specified by the given filename
            </summary>
            <param name="filename"></param>		
        </member>
        <member name="M:MathML.MathMLDocument.Load(System.IO.Stream)">
            <summary>
            load the mathml document from the specified stream
            </summary>
            <param name="inStream"></param>
        </member>
        <member name="M:MathML.MathMLDocument.Load(System.IO.TextReader)">
            <summary>
            load the document from the spedified text reader
            </summary>
            <param name="txtReader"></param>
        </member>
        <member name="M:MathML.MathMLDocument.LoadXml(System.String)">
            <summary>
            override the base LoadXML to use a MathMLReader instead of a 
            XmlReader in order to resolve mathml entities.
            </summary>
            <param name="xml">a string in xml format</param>
        </member>
        <member name="M:MathML.MathMLDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            Create a XmlElement. This is typically called by the base class when creating a DOM tree
            </summary>
            <param name="prefix"></param>
            <param name="localname"></param>
            <param name="nsURI"></param>
            <returns></returns>
        </member>
        <member name="M:MathML.MathMLDocument.CreateTextNode(System.String)">
            <summary>
            create a text node that is trimmed of leading or trailing whitespace
            </summary>
        </member>
        <member name="P:MathML.MathMLDocument.DocumentElement">
            <summary>
            Get the root of the mathml tree, this will allways be a 'math' element.
            If the mathml document happens to be a plain xml, or a html document, the
            true document element is not a 'math' element, but rather a 'html' or 
            some other type of node. This finds the first 'math' element.
            </summary>
        </member>
        <member name="T:MathML.MathMLEncloseElement">
            <summary>
            This interface supports the menclose element Section 3.3.9. The menclose 
            element renders its content inside the enclosing notation specified by its 
            notation attribute. menclose accepts any number of arguments; if this
            number is not 1, its contents are treated as a single ‘inferred mrow’ 
            containing its arguments, as described in Section 3.1.3.
            </summary>
        </member>
        <member name="M:MathML.MathMLEncloseElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLEncloseElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLEncloseElement.Notation">
            <summary>
            When notation has the value longdiv, the contents are drawn enclosed by a 
            long division symbol. A complete example of long division is accomplished 
            by also using mtable and malign. When notation is specified as actuarial, 
            the contents are drawn enclosed by an actuarial symbol. The case of 
            notation=radical																																			   is equivalent to the msqrt schema.
            </summary>
        </member>
        <member name="T:MathML.MathMLFencedElement">
            <summary>
            This interface extends the MathMLPresentationContainer interface for the 
            MathML fenced content element mfenced.
            </summary>
        </member>
        <member name="M:MathML.MathMLFencedElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLFencedElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLFencedElement.Open">
            <summary>
            A string representing the opening-fence for the mfenced element, if specified; 
            this is the element’s open attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLFencedElement.Close">
            <summary>
            A string representing the opening-fence for the mfenced element, if specified; 
            this is the element’s close attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLFencedElement.Separators">
            <summary>
            A string representing any separating characters inside the mfenced element, if specified; 
            this is the element’s separators attribute. The value of separators is a sequence of zero 
            or more separator characters (or entity references), optionally separated by whitespace. 
            Each sep#i consists of exactly one character or entity reference. Thus, separators=",;" 
            is equivalent to separators=" , ; ".
            </summary>
        </member>
        <member name="T:MathML.MathMLFnElement">
            <summary>
            The fn element makes explicit the fact that a more general MathML 
            object is intended to be used in the same manner as if it were a 
            pre-defined function such as sin or plus.
            </summary>
        </member>
        <member name="M:MathML.MathMLFnElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLFnElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLFractionElement">
            <summary>
            This interface extends the MathMLPresentationElement interface for the 
            MathML fraction element mfrac.
            </summary>
        </member>
        <member name="M:MathML.MathMLFractionElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLFractionElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLFractionElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.LineThickness">
            <summary>
            representing the linethickness attribute of the mfrac, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.NumAlign">
            <summary>
            Represents the numalign attribute of the mfrac, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.DenomAlign">
            <summary>
            Represents the denomalign attribute of the mfrac, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.Bevelled">
            <summary>
            get the bevelled attribute
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.Numerator">
            <summary>
            get the numerator of the fraction. This is the first child node
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.Denominator">
            <summary>
            get the deniminator of the fraction, this is the second child node
            </summary>
        </member>
        <member name="P:MathML.MathMLFractionElement.EmbelishedOperator">
            <summary>
            Implement rule 2 of the definition of an embelished operator
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLGlyphElement">
            <summary>
            Unicode defines a large number of characters used in mathematics, and in most cases, 
            glyphs representing these characters are widely available in a variety of fonts. 
            Although these characters should meet almost all users needs, MathML recognizes 
            that mathematics is not static and that new characters are added when convenient. 
            Characters that become well accepted will likely be eventually incorporated
            by the Unicode Consortium or other standards bodies, but that is often a lengthy 
            process. In the meantime, a mechanism is necessary for accessing glyphs from 
            non-standard fonts representing these characters. The mglyph element is the 
            means by which users can directly access glyphs for characters that are not 
            defined by Unicode, or not known to the renderer. Similarly, the mglyph element 
            can also be used to select glyph variants for existing Unicode characters, 
            as might be desirable when a glyph variant has begun to differentiate itself 
            as a new character by taking on a distinguished mathematical meaning. The mglyph 
            element names a specific character glyph, and is valid inside any MathML leaf 
            content listed in Section 3.1.6 (mi, etc.) or Section 4.2.2 (ci, etc.) unless 
            otherwise restricted by an attribute (e.g. base=2 to &lt;cn&gt;). In order for a 
            visually-oriented renderer to render the character, the renderer must be told 
            what font to use and what index within that font to use.
            
            Note, a future possible optimization, since most glyphs are created from
            entities mapped to glyphs, we could change the attributes as a pointer, 
            or index to a entity replacement???
            </summary>
        </member>
        <member name="M:MathML.MathMLGlyphElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLGlyphElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLGlyphElement.Alt">
            <summary>
            A string giving an alternate name for the character. 
            Represents the mglyph’s alt attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLGlyphElement.FontFamily">
            <summary>
            A string representing the font family.
            </summary>
        </member>
        <member name="P:MathML.MathMLGlyphElement.Index">
            <summary>
            An unsigned integer giving the glyph’s position within the font.
            </summary>
        </member>
        <member name="T:MathML.MathMLIntervalElement">
            <summary>
            The interval element is used to represent simple mathematical 
            intervals on the real number line. It contains either two child 
            elements that evaluate to real numbers or one child element that 
            is a condition for defining membership in the interval.
            </summary>
        </member>
        <member name="M:MathML.MathMLIntervalElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLIntervalElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLLabeledRowElement">
            <summary>
            This interface extends the MathMLTableRowElement interface to represent the 
            mlabeledtr element Section 3.5.3. Note that the presence of a label causes the
            indexth child node to differ from the index-th cell!
            </summary>
            <remarks>
            The mlabeledtr element represents a labeled row of a table and can be used for 
            numbered equations. The first child of mlabeledtr is the label. A label is
            somewhat special in that it is not considered an expression in the matrix and 
            is not counted when determining the number of columns in that row.
            </remarks>
        </member>
        <member name="T:MathML.MathMLTableRowElement">
            <summary>
            This interface extends the MathMLPresentationElement interface 
            for the MathML table or matrix row element mtr.
            </summary>
        </member>
        <member name="M:MathML.MathMLTableRowElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLTableRowElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLTableRowElement.RowAlign">
            <summary>
            rowalign of type DOMString A string representing an override of the row alignment specified 
            in the containing mtable. Allowed values are top, bottom, center, baseline, and axis.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableRowElement.ColumnAlign">
            <summary>
            columnalign of type DOMString A string representing an override of the column alignment 
            specified in the containing mtable. Allowed values are left, center, and right.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableRowElement.GroupAlign">
            <summary>
            groupalign of type DOMString [To be changed?]
            </summary>
        </member>
        <member name="P:MathML.MathMLTableRowElement.Cells">
            <summary>
            cells of type MathMLNodeList, readonly A MathMLNodeList consisting of the cells of the row. 
            Note that this does not include the label if this is a MathMLLabeledRowElement!
            </summary>
        </member>
        <member name="M:MathML.MathMLLabeledRowElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLLabeledRowElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summray>
            accept a visitor.
            return the return value of the visitor's visit method
            </summray>
        </member>
        <member name="P:MathML.MathMLLabeledRowElement.Label">
            <summary>
            A MathMLElement representing the label of this row. Note that retrieving this should 
            have the same effect as a call to Node::getfirstChild(), while setting it should 
            have the same effect as Node::replaceChild(Node::getfirstChild()). 
            DOMException NO_MODIFICATION_ALLOWED_ERR: Raised if this MathMLElement or the new 
            MathMLElement is read-only.
            </summary>
        </member>
        <member name="T:MathML.MathMLLambdaElement">
            <summary>
            The lambda element is used to construct a user-defined function from an 
            expression and one or more free variables.
            </summary>
        </member>
        <member name="M:MathML.MathMLLambdaElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLLambdaElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLListElement">
            <summary>
            The list element is the container element which represents a list of elements. 
            Elements can be defined either by explicitly listing the elements, 
            or by using the bvar and condition elements.
            </summary>
        </member>
        <member name="M:MathML.MathMLListElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLListElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLMathElement">
            <summary>
            This interface represents the top-level MathML math element. It may become useful 
            for interfacing between the Document Object Model objects encoding an enclosing 
            document and the MathML DOM elements that are its children. It could also be used 
            for some purposes as a MathML DOM surrogate for a Document object. For instance, 
            MathML-specific factory methods could be placed here, as could methods for 
            creating MathML-specific Iterators or TreeWalkers. However, this functionality is 
            as yet undefined.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>		
        </member>
        <member name="M:MathML.MathMLMathElement.GetArgument(System.Int32)">
            <summary>
            This method returns the indexth child argument element of this element. 
            This frequently differs from the value of Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.SetArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method sets newArgument as the index-th argument of this element. 
            If there is currently an index-th argument, it is replaced by newArgument.
            This frequently differs from setting the node at Node::childNodes().item(index), 
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.InsertArgument(MathML.MathMLElement,System.Int32)">
            <summary>
            This method inserts newArgument before the current index-th argument of this 
            element. If index is 0, or if index is one more than the current number
            of arguments, newArgument is appended as the last argument. This frequently 
            differs from setting the node at Node::childNodes().item(index),
            as qualifier elements and declare elements are not counted.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.DeleteArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element. 
            Note that child elements which are qualifier elements or declare
            elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.RemoveArgument(System.Int32)">
            <summary>
            This method deletes the index-th child element that is an argument of this element, 
            and returns it to the caller. Note that child elements that are qualifier
            elements or declare elements are not counted in determining the index-th argument.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.GetDeclaration(System.Int32)">
            <summary>
            This method retrieves the index-th child declare element of this element.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.SetDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration as the index-th child declaration of this element. 
            If there is already an index-th declare child element, it is replaced by newDeclaration.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.InsertDeclaration(MathML.MathMLDeclareElement,System.Int32)">
            <summary>
            This method inserts newDeclaration before the current index-th child declare element 
            of this element. If index is 0, newDeclaration is appended as the last child declare element.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.RemoveDeclaration(System.Int32)">
            <summary>
            This method removes the MathMLDeclareElement representing the index-th declare child 
            element of this element, and returns it to the caller. Note that index is the position 
            in the list of declare element children, as opposed to the position in the list of all 
            child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.DeleteDeclaration(System.Int32)">
            <summary>
            This method deletes the MathMLDeclareElement representing the index-th declare child 
            element of this element. Note that index is the position in the list of declare 
            element children, as opposed to the position in the list of all child Nodes.
            </summary>
        </member>
        <member name="M:MathML.MathMLMathElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLMathElement.Macros">
            <summary>
            Represents the macros attribute of the math element. See Section 7.1.2.
            </summary>
        </member>
        <member name="P:MathML.MathMLMathElement.Display">
            <summary>
            Represents the display attribute of the math element. This value is either block 
            or inline. The display attribute replaces the deprecated mode attribute. 
            It specifies whether the enclosed MathML expression should be
            rendered in a display style or an in-line style. Allowed values are "block" 
            and "inline" (default).
            </summary>
        </member>
        <member name="P:MathML.MathMLMathElement.ArgumentCount">
            <summary>
            The number of child elements of this element which represent arguments of the element, 
            as opposed to qualifiers or declare elements. Thus for a MathMLContentContainer 
            it does not contain elements representing bound variables, conditions, separators, 
            degrees, or upper or lower limits (bvar, condition, sep, degree, lowlimit, or uplimit).
            </summary>
        </member>
        <member name="P:MathML.MathMLMathElement.Arguments">
            <summary>
            This attribute accesses the child MathMLElements of this element which are arguments 
            of it, as a MathMLNodeList. Note that this list does not contain any MathMLElements 
            representing qualifier elements or declare elements.
            </summary>
        </member>
        <member name="P:MathML.MathMLMathElement.Declarations">
            <summary>
            Provides access to the declare elements which are children of this element, 
            in a MathMLNodeList. All Nodes in this list must be MathMLDeclareElements.
            </summary>
        </member>
        <member name="T:MathML.MathMLMatrixElement">
            <summary>
            The matrix element is the container element for matrixrow elements.
            </summary>
        </member>
        <member name="M:MathML.MathMLMatrixElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLMatrixElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLMatrixRowElement">
            <summary>
            The matrixrow element is the container element for the elements of a matrix.
            </summary>
        </member>
        <member name="M:MathML.MathMLMatrixRowElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLMatrixRowElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLMultiScriptsElement">
            <summary>
            This interface extends the MathMLPresentationElement interface for the 
            MathML multiscripts (including prescripts or tensors) element mmultiscripts.
            </summary>
        </member>
        <member name="M:MathML.MathMLMultiScriptsElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLMultiScriptsElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLMultiScriptsElement.EmbelishedOperator">
            <summary>
            Implement rule 2 of the definition of an embelished operator
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLOperatorElement">
            <summary>
            This interface extends the MathMLPresentationToken interface for the 
            MathML operator element mo.
            </summary>
            <remarks>
            An mo element represents an operator or anything that should be rendered as an operator. 
            In general, the notational conventions for mathematical operators are quite complicated, 
            and therefore MathML provides a relatively sophisticated mechanism for specifying the 
            rendering behavior of an mo element. As a consequence, in MathML the list of things that 
            should ‘render as an operator’ includes a number of notations that are not mathematical 
            operators in the ordinary sense. Besides ordinary operators with infix, prefix, or postfix 
            forms, these include fence characters such as braces, parentheses, and ‘absolute value’ 
            bars, separators such as comma and semicolon, and mathematical accents such as a bar or 
            tilde over a symbol. The term ‘operator’ as used in the present chapter means any symbol 
            or notation that should render as an operator, and that is therefore representable by an mo
            element. That is, the term ‘operator’ includes any ordinary operator, fence, separator, 
            or accent unless otherwise specified or clear from the context. All such symbols are represented 
            in MathML with mo elements since they are subject to essentially the same rendering attributes 
            and rules; subtle distinctions in the rendering of these classes of symbols, when they exist, 
            are supported using the boolean attributes fence, separator and accent, which can be used to 
            distinguish these cases. A key feature of the mo element is that its default attribute values 
            are set on a case-by-case basis from an ‘operator dictionary’ as explained below. In particular,
            default values for fence, separator and accent can usually be found in the operator dictionary 
            and therefore need not be specified on each mo element. Note that some mathematical operators 
            are represented not by mo elements alone, but by mo elements ‘embellished’ with (for example) 
            surrounding superscripts; this is further described below. Conversely, as presentation elements, 
            mo elements can contain arbitrary text, even when that text has no standard interpretation as
            an operator; for an example, see the discussion ‘Mixing text and mathematics’ in Section 3.2.6. 
            See also Chapter 4 for definitions of MathML content elements that are guaranteed to have the 
            semantics of specific mathematical operators.
            </remarks>
        </member>
        <member name="T:MathML.MathMLPresentationToken">
            <summary>
            This interface extends the MathMLPresentationElement interface to include 
            access for attributes specific to text presentation. It serves as the 
            base class for all MathML presentation token elements. Access to the body 
            of the element is via the Value attribute inherited from Node. Elements 
            that expose only the core presentation token attributes are directly 
            supported by this object. These elements are:
            
            mi identifier element
            mn number element
            mtext text element
            </summary>
        </member>
        <member name="M:MathML.MathMLPresentationToken.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="F:MathML.MathMLPresentationToken.variantMap">
            <summary>
            map a math variant enum to its' text representation
            </summary>		
        </member>
        <member name="M:MathML.MathMLPresentationToken.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.MathVariant">
            <summary>
            The mathvariant attribute for the element, if specified. One of the values 
            "normal", "bold", "italic", "bold-italic", "double-struck", "bold-fraktur", 
            "script", "bold-script", "fraktur", "sans-serif", "bold-sans-serif", 
            "sans-serif-italic", "sans-serif-bold-italic", or "monospace". 
            
            if no attribute exists, the default is evaluated per the mathml spec (mi element)
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.MathSize">
            <summary> 
            The mathsize attribute for the element, if specified. Either "small", 
            "normal" or "big", or of the form "number v-unit".
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.MathColor">
            <summary>
            The mathcolor attribute for the element, if specified. The String returned 
            should be in one of the forms "#rgb" or "#rrggbb", or should be an html-color-name, 
            as specified in Section 3.2.2.2.
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.MathBackground">
            <summary>
            The mathbackground attribute for the element, if specified. 
            The String returned should be in one of the forms "#rgb" or "#rrggbb", 
            or should be an html-color-name, as specified in Section 3.2.2.2.
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.Contents">
            <summary>
            Returns the child Nodes of the element. These should consist only of 
            Text nodes, MathMLGlyphElements, and MathMLAlignMarkElements. 
            Should behave the same as the base class’s Node::childNodes
            attribute; however, it is provided here for clarity.
            </summary>
        </member>
        <member name="P:MathML.MathMLPresentationToken.Style">
            <summary>
            finds the style element for this node if one exists, 
            returns null otherwise.
            
            note, it is possible to override a method in MathMLStyleElement
            to set some paramenters whenever a new child node is added to it, 
            but this method is internal to System.Xml, and we can not count
            on it being there in non-ms .net runtimes. Besides, searching 
            throught the parent list should not be that much slower, and it
            is easier to implement.
            </summary>
        </member>
        <member name="M:MathML.MathMLOperatorElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLOperatorElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="M:MathML.MathMLOperatorElement.GetAttributes">
            <summary>
            grab a set of operator attributes from the operator dictionary.
            this needs to be done after the object is created as we need to
            know if this node is prefix, infix, or postfix, and the prev and
            next siblings are not set yet in the ctor
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Form">
            <summary>
            The form attribute ("prefix", "infix" or "postfix") for the mo element, if specified.
            </summary>
            <remarks> 
            The form attribute does not usually have to be specified explicitly, since there 
            are effective heuristic rules for inferring the value of the form attribute from 
            the context. If it is not specified, and there is more than one possible form in 
            the dictionary for an mo element with given content, the renderer should choose 
            which form to use as follows (but see the exception for embellished operators, 
            described later):
            If the operator is the first argument in an mrow of length (i.e. number of arguments) 
            greater than one (ignoring all space-like arguments (see Section 3.2.7) in the 
            determination of both the length and the first argument), the prefix form is used;
            
            if it is the last argument in an mrow of length greater than one (ignoring all 
            space-like arguments), the postfix form is used;
              
            in all other cases, including when the operator is not part of an mrow, the infix 
            form is used.
            
            Note that these rules make reference to the mrow in which the mo 
            element lies. In some situations, this mrow might be an inferred mrow implicitly 
            present around the arguments of an element such as msqrt or mtd. Opening (left) 
            fences should have form="prefix", and closing (right) fences should have 
            form="postfix"; separators are usually ‘infix’, but not always, depending on 
            their surroundings. As with ordinary operators, these values do not usually 
            need to be specified explicitly.
            
            If the operator does not occur in the dictionary with the specified form, the 
            renderer should use one of the forms that is available there, in the order of 
            preference: infix, postfix, prefix; if no forms are available for the given mo 
            element content, the renderer should use the defaults given in parentheses in 
            the table of attributes for mo.
            </remarks>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Fence">
            <summary>
            The fence attribute ("true" or "false") for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Separator">
            <summary>
            The separator attribute ("true" or "false") for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.LSpace">
            <summary>
            The lspace attribute (spacing to left) of the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.RSpace">
            <summary>
            The rspace attribute (spacing to right) of the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Stretchy">
            <summary>
            The stretchy attribute ("true" or "false") for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Symmetric">
            <summary>
            The symmetric attribute ("true" or "false") for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.MaxSize">
            <summary>
            The maxsize attribute for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.MinSize">
            <summary>
            The minsize attribute for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.LargeOp">
            <summary>
            The largeop attribute for the mo element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.MovableLimits">
            <summary>
            The movablelimits ("true" or "false") attribute for the mo element, if specified.
            </summary>
            <remarks>
            The movablelimits attribute specifies whether underscripts and overscripts attached 
            to this mo element should be drawn as subscripts and superscripts when displaystyle=false. 
            movablelimits=false means that underscripts and overscripts should never be drawn as 
            subscripts and superscripts. In general, displaystyle is true for displayed mathematics 
            and false for inline mathematics. Also, displaystyle is false by default within tables, 
            scripts and fractions, and a few other exceptional situations detailed in Section 3.3.4. 
            Thus, operators with movablelimits=true will display with limits (i.e. underscripts 
            and overscripts) in displayed mathematics, and with subscripts and superscripts in 
            inline mathematics, tables, scripts and so on. Examples of operators that typically have
            movablelimits=true are sum, prod, and lim. 
            </remarks>
        </member>
        <member name="P:MathML.MathMLOperatorElement.Accent">
            <summary>
            The accent attribute ("true" or "false") for the mo element, if specified.
            The accent attribute determines whether this operator should be treated by 
            default as an accent (diacritical mark) when used as an underscript or overscript; see
            munder, mover, and munderover
            </summary>
        </member>
        <member name="P:MathML.MathMLOperatorElement.EmbelishedOperator">
            <summary>
            a mathml operator is a 'embelished operator' by rule 1 of the 
            definition of an embelished operator.
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLPaddedElement">
            <summary>
            This interface extends the MathMLElement interface for the MathML 
            spacing adjustment element mpadded.
            </summary>
        </member>
        <member name="M:MathML.MathMLPaddedElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLPaddedElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLPiecewiseElement">
            <summary>
            The piecewise element represents the piecewise definition of a function. 
            It contains child piece elements, each represented by a MathMLCaseElement, 
            giving the various conditions and associated function value specifications 
            in the function definition, and an optional otherwise child element, 
            represented by a MathMLContentElement, giving the ‘default’ value of the 
            function - that is, the value to be assigned when none of the conditions 
            specified in the piece child elements hold.
            </summary>
        </member>
        <member name="M:MathML.MathMLPiecewiseElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLPiecewiseElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLPlaceholderElement">
            <summary>
            A way to describe a 'placeholder' when editing math ml. This class is NOT part of
            the W3C published mathml specification, and this class will not be persisted to or
            from a mathml document. This class is only to be programatically created by editing 
            applications.
            </summary>
        </member>
        <member name="M:MathML.MathMLPlaceholderElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLPlaceholderElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            Accept a visitor. Calls the Visitor's MathMLPlaceHolder Vist method
            </summary>
        </member>
        <member name="T:MathML.MathMLPredefinedSymbol">
            <summary>
            This interface supports all of the empty built-in operator, relation, function, 
            and constant and symbol elements that have the definitionURL and encoding attributes
            in addition to the standard set of attributes. The elements supported in order 
            of their appearance in Section 4.4 are: inverse, compose, ident, domain, codomain,
            image, quotient, exp, factorial, divide, max, min, minus, plus, power, rem, times, 
            root, gcd, and, or, xor, not, implies, forall, exists, abs,	conjugate, arg, real, 
            imaginary, lcm, floor, ceiling, eq, neq, gt, lt, geq, leq, equivalent, approx, 
            factorof, ln, log, int, diff, partialdiff, divergence, grad, curl, laplacian, union, 
            intersect, in, notin, subset, prsubset, notsubset, notprsubset, setdiff, card, 
            cartesianproduct, sum, product, limit, tendsto, sin, cos, tan, sec, csc, cot, 
            sinh, cosh, tanh, sech, csch, coth, arcsin, arccos, arctan, arcsec, arccsc, 
            arccot, arcsinh, arccosh, arctanh, arcsech, arccsch, arccoth, mean, sdev, variance, 
            median, mode, moment, determinant, transpose, selector, vectorproduct, scalarproduct, 
            outerproduct, integers, reals, rationals, naturalnumbers, complexes, primes, 
            exponentiale, imaginaryi, notanumber, true, false, emptyset, pi, eulergamma, and infinity.
            </summary>
        </member>
        <member name="M:MathML.MathMLPredefinedSymbol.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLPredefinedSymbol.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLPredefinedSymbol.DefinitionURL">
            <summary>
            A string that provides an override to the default semantics, or provides a more specific definition
            </summary>
        </member>
        <member name="P:MathML.MathMLPredefinedSymbol.Encoding">
            <summary>
            A string describing the syntax in which the definition located at definitionURL is given.
            </summary>
        </member>
        <member name="P:MathML.MathMLPredefinedSymbol.Arity">
            <summary>
            A string representing the number of arguments. Values include 0, 1, ... and variable.
            </summary>
        </member>
        <member name="P:MathML.MathMLPredefinedSymbol.SymbolName">
            <summary>
            A string giving the name of the MathML element represented. This is a convenience attribute
            only; accessing it should be synonymous with accessing the Element::tagName attribute.
            </summary>
        </member>
        <member name="T:MathML.MathMLPresentationTokenNodeList">
            <summary>
            privide the list of child nodes for a presentation token
            this functions the same way as standard child node list, 
            it just makes sure the nodes are of type text, glyph, 
            or align mark
            TODO make sure this only has types of text, glyph, or align mark
            </summary>
        </member>
        <member name="T:MathML.MathMLRadicalElement">
            <summary>
            This interface extends the MathMLPresentationElement interface for the MathML radical 
            and square root elements mroot and msqrt.
            </summary>
        </member>
        <member name="M:MathML.MathMLRadicalElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLRadicalElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLRadicalElement.Radicand">
            <summary>
            The first MathMLElement child of this node, represents the 
            base of the radical.
            </summary>
        </member>
        <member name="P:MathML.MathMLRadicalElement.Index">
            <summary>
            The second MathMLElement child of this node. This represents the index
            of the radical. Must be null for a "msqrt".
            </summary>
        </member>
        <member name="T:MathML.MathMLReader">
            <summary>
            A Reader specific to mathml documents. This is a non-validating reader, 
            that automatically resolves entity references without any external DTD 
            or schema. mathml entities are either resolved to a standard printing character, 
            or to a character in a special reserved block of unicode. If a char is one
            of these reserved values, it is the job of the renderer to determine how to
            display it.
            
            As this reader is very specific to mathml, it is tuned to be very fast, much 
            faster than the validating reader, even without any external dtd.
            </summary>
        </member>
        <member name="F:MathML.MathMLReader.entity">
            <summary>
            set whenever a mathml entity is encountered, and unset
            after the next node is read.
            </summary>
        </member>
        <member name="M:MathML.MathMLReader.#ctor">
            <summary>
            pass all standard construction to base class
            </summary>
        </member>
        <member name="M:MathML.MathMLReader.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            pass all standard construction to base class
            </summary>
        </member>
        <member name="M:MathML.MathMLReader.#ctor(System.IO.Stream)">
            <summary>
            pass all standard construction to base class
            </summary>
        </member>
        <member name="M:MathML.MathMLReader.#ctor(System.IO.TextReader)">
            <summary>
            pass all standard construction to base class
            </summary>
        </member>
        <member name="M:MathML.MathMLReader.Read">
            <summary>
            if the resolved entity is not, a 'Read' is supposed to bring forth the next
            node. The next node was allready brought forth in the NodeType method where
            the mathml entity was resolved
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathML.MathMLReader.Skip">
            <summary>
            skip
            </summary>
        </member>
        <member name="P:MathML.MathMLReader.NodeType">
            <summary>
            the current node type
            </summary>
        </member>
        <member name="P:MathML.MathMLReader.Value">
            <summary>
            entitities are resolved to text nodes, so return the entity
            value if it is set.
            </summary>
        </member>
        <member name="P:MathML.MathMLReader.Name">
            <summary>
            we resolve entities to text nodes, so a xml reader should return
            an empty string if it is at a text node.
            </summary>
        </member>
        <member name="P:MathML.MathMLReader.LocalName">
            <summary> 
            same as Name
            </summary>
        </member>
        <member name="T:MathML.MathMLScriptElement">
            <summary>
            This interface extends the MathMLPresentationElement interface for the 
            MathML subscript, superscript and subscript-superscript pair elements
            msub, msup, and	msubsup.
            </summary>
        </member>
        <member name="M:MathML.MathMLScriptElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLScriptElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.SubScriptShift">
            <summary>
            A string representing the minimum amount to shift the baseline of the 
            subscript down, if specified; this is the element’s subscriptshift attribute. 
            This must return null for an msup.
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.SuperScriptShift">
            <summary>
            The superscriptshift attribute specifies the minimum amount to shift the 
            baseline of superscript up. v-unit represents a unit of vertical length 
            (see Section 2.4.4.2). The msup element increments scriptlevel by 1, and sets 
            displaystyle to false, within superscript, but leaves both attributes unchanged 
            within base. (Theseattributes are inherited by every element through its 
            rendering environment, but can be set explicitly only on mstyle; see Section 3.3.4.)
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.Base">
            <summary>
            A MathMLElement representing the base of the script. This is the first 
            child of the element.
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.SubScript">
            <summary>
            A MathMLElement representing the subscript of the script. This is the 
            second child of a msub or msubsup; retrieval must return null for an msup.
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.SuperScript">
            <summary>
            A MathMLElement representing the superscript of the script. This is the 
            second child of a msup, or the third child of a msubsup; retrieval must 
            return null for an msub.										
            </summary>
        </member>
        <member name="P:MathML.MathMLScriptElement.EmbelishedOperator">
            <summary>
            Implement rule 2 of the definition of an embelished operator
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLSemanticsElement">
            <summary>
            This interface represents the semantics element in MathML.
            </summary>
        </member>
        <member name="M:MathML.MathMLSemanticsElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLSemanticsElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLSemanticsElement.EmbelishedOperator">
            <summary>
            Implement rule 2 of the definition of an embelished operator
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLSeparator">
            <summary>
            Note, this class is not part of the published MathML specification.
            This class represents the "<sep/>" separator node
            </summary>
        </member>
        <member name="M:MathML.MathMLSeparator.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLSeparator.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLSetElement">
            <summary>
            The set element is the container element that represents a set of elements. 
            The elements of a set can be defined either by explicitly listing the elements,
            or by using the bvar and condition elements.
            </summary>
        </member>
        <member name="M:MathML.MathMLSetElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLSetElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLSpaceElement">
            <summary>
            An mspace empty element represents a blank space of any desired size, as set by its attributes. 
            It can also be used to make linebreaking suggestions to a visual renderer. Note that the 
            default values for attributes have been chosen so that they typically will have no effect on 
            rendering. Thus, the mspace element is generally used with one or more attribute values 
            explicitly specified.
            </summary>
        </member>
        <member name="M:MathML.MathMLSpaceElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLSpaceElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLSpaceElement.Width">
            <summary>
            the 'width' attribute
            </summary>
        </member>
        <member name="P:MathML.MathMLSpaceElement.Height">
            <summary>
            the 'height' attribute
            </summary>
        </member>
        <member name="P:MathML.MathMLSpaceElement.Depth">
            <summary>
            the 'depth' attribute
            </summary>
        </member>
        <member name="T:MathML.MathMLStringLitElement">
            <summary>
            This interface extends the MathMLPresentationToken interface for the MathML 
            string literal element ms.
            </summary> 
            <remarks>
            The ms element is used to represent ‘string literals’ in expressions meant to be interpreted 
            by computer algebra systems or other systems containing ‘programming languages’. By default, 
            string literals are displayed surrounded by double quotes. As explained in Section 3.2.6, 
            ordinary text embedded in a mathematical expression	should be marked up with mtext, or in 
            some cases mo or mi, but never with ms.	Note that the string literals encoded by ms are 
            ‘Unicode strings’ rather than ‘ASCII strings’. In practice, non-ASCII characters will 
            typically be represented by entity 	references. For example, <c>&lt;ms&gt;&amp;amp&lt;/ms&gt;</c> 
            represents a string literal containing a single character, &amp;, and <c>&lt;ms&gt;&amp;amp;amp;&lt;/ms&gt;</c> 
            represents a string literal containing 5 characters, the first one of which is &amp;. Like all token elements, 
            ms does trim and collapse whitespace in its content according to the rules of Section 2.4.6, 
            so whitespace intended to remain in the content should be encoded as described in that section.
            </remarks>
        </member>
        <member name="M:MathML.MathMLStringLitElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLStringLitElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLStringLitElement.LQuote">
            <summary>
            A string giving the opening delimiter for the string literal; 
            represents the lquote attribute for the ms element, if specified.
            </summary>
        </member>
        <member name="P:MathML.MathMLStringLitElement.RQuote">
            <summary>
            A string giving the closing delimiter for the string literal; 
            represents the rquote attribute for the ms element, if specified.
            </summary>
        </member>
        <member name="T:MathML.MathMLStyleElement">
            <summary>
            This interface extends the MathMLElement interface for the MathML 
            style element mstyle. While the mstyle element may contain any 
            attributes allowable on any MathML presentation element, only 
            attributes specific to the mstyle element are included in the 
            interface below. Other attributes should be accessed using
            the methods on the base Element class, particularly the 
            Element::getAttribute and Element::setAttribute methods, or 
            even the Node::attributes attribute to access all of them at 
            once. Not only does this obviate a lengthy list below, but 
            it seems likely that most implementations will find this a 
            considerably more useful interface to a MathMLStyleElement.
            </summary>
        </member>
        <member name="M:MathML.MathMLStyleElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLStyleElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.ScriptLevel">
            <summary>
            scriptlevel A string of the form ‘+/- unsigned integer ’; 
            represents the scriptlevel attribute for the mstyle element,
            if specified. See also the discussion of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.DisplayStyle">
            <summary>
            displaystyle Either "true" or "false"; a string representing the displaystyle 
            attribute for the mstyle element, if specified. See also the 
            discussion of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.ScriptSizeMultiplier">
            <summary> 
            A string of the form ‘number’; represents the scriptsizemultiplier 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.ScriptMinSize">
            <summary> 
            A string of the form ‘number v-unit’; represents the scriptminsize 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.Color">
            <summary>
            A string representation of a color; represents the color attribute 
            for the mstyle element, if specified. See also the discussion of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.Background">
            <summary>	
            A string representation of a color or the string "transparent"; 
            represents the background attribute for the mstyle element, 
            if specified. See also the discussion of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.VeryVeryThinMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the veryverythinmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.VeryThinMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the verythinmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.ThinMathspace">
            <summary> A string of the form ‘number h-unit’; 
            represents the thinmathspace attribute for the mstyle element,
            if specified. See also the discussion of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.MediumMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the mediummathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.ThickMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the thickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.VeryThickMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the verythickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.VeryVeryThickMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the veryverythickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegatieVeryVeryThinMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the negativeveryverythinmathspace 
            attribute for the mstyle element, if specified. See also the discussion of 
            this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeVeryThinMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the negativeverythinmathspace
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeThinMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the negativethinmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeMediumMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the negativemediummathspace
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeThickMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the negativethickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeVeryThickMathspace">
            <summary> 
            A string of the form ‘number h-unit’; represents the negativeverythickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLStyleElement.NegativeVeryVeryThickMathspace">
            <summary>
            A string of the form ‘number h-unit’; represents the negativeveryverythickmathspace 
            attribute for the mstyle element, if specified. See also the discussion 
            of this attribute.
            </summary>
        </member>
        <member name="T:MathML.MathMLTableCellElement">
            <summary>
            This interface extends the MathMLPresentationContainer interface for the 
            MathML table or matrix cell element mtd.
            </summary>
        </member>
        <member name="M:MathML.MathMLTableCellElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>        
        </member>
        <member name="M:MathML.MathMLTableCellElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>		
        </member>
        <member name="P:MathML.MathMLTableCellElement.RowSpan">
            <summary>
            rowspan of type DOMString A string representing a positive integer that specifies the number 
            of rows spanned by this cell. The default is 1.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.ColumnSpan">
            <summary>
            columnspan of type DOMString A string representing a positive integer that specifies the number 
            of columns spanned by this cell. The default is 1.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.RowAlign">
            <summary>
            rowalign of type DOMString A string specifying an override of the inherited vertical 
            alignment of this cell within the table row. Allowed values are top, bottom,
            center, baseline, and axis.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.ColumnAlign">
            <summary>
            columnalign of type DOMString A string specifying an override of the inherited horizontal 
            alignment of this cell within the table column. Allowed values are left, center, and right.	
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.GroupAlign">
            <summary>
            groupalign of type DOMString A string specifying how the alignment groups within the cell are 
            to be aligned with those in cells above or below this cell. The string consists of a 
            space-separated sequence of specifiers, each of which can have the following values: left, 
            right, center, or decimalpoint.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.HasAlignGroups">
            <summary>
            hasaligngroups of type boolean, readonly A string with the values true or false indicating 
            whether the cell contains align groups.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableCellElement.CellIndex">
            <summary>
            cellindex of type DOMString, readonly A string representing the integer index (1-based?) 
            of the cell in its containing row. [What about spanning cells? How do these affect this value?]
            </summary>
        </member>
        <member name="T:MathML.TableAlign">
            <summary>
            Hold the parsed values of a 'mtable' element's 'align' attribute.
            </summary>
        </member>
        <member name="M:MathML.TableAlign.#ctor(MathML.Align,System.Int32)">
            <summary>
            create a TableAlign with the following values
            </summary>
            <param name="align"></param>
            <param name="rownumber"></param>
        </member>
        <member name="F:MathML.TableAlign.Align">
            <summary>
            the align attribute
            </summary>
        </member>
        <member name="F:MathML.TableAlign.RowNumber">
            <summary>
            the row number if specified
            </summary>
        </member>
        <member name="T:MathML.MathMLTableElement">
            <summary>
            This interface extends the MathMLPresentationElement interface 
            for the MathML table or matrix element mtable.
            </summary>
        </member>
        <member name="M:MathML.MathMLTableElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLTableElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.Align">
            <summary>
            The vertical alignment of the table with the adjacent text. Allowed values are 
            (top | bottom | center | baseline | axis)[rownumber], where rownumber is between 1 
            and n (for a table with n rows) or -1 and -n.
            </summary>
            <remarks>
            The align attribute specifies where to align the table with respect to its environment. 
            axis means to align the center of the table on the environment’s axis. (The axis of an 
            equation is an alignment line used by typesetters. It is the line on which a minus sign 
            typically lies. The center of the table is the midpoint of the table’s vertical extent.) 
            center and baseline both mean to align the center of the table on the environment’s 
            baseline. top or bottom aligns the top or bottom of the table on the environment’s 
            baseline. If the align attribute value ends with a rownumber between 1 and n (for a 
            table with n rows), the specified row is aligned in the way described above, rather than
            the table as a whole; the top (first) row is numbered 1, and the bottom (last) row is 
            numbered n. The same is true if the row number is negative, between -1 and -n, except 
            that the bottom row is referred to as -1 and the top row as -n. Other values of rownumber 
            are illegal.
            </remarks>
        </member>
        <member name="P:MathML.MathMLTableElement.RowAlign">
            <summary>
            A string representing the alignment of entries in each row, 
            consisting of a space-separated sequence of alignment specifiers, each of which can have the 
            following values: top, bottom, center, baseline, or axis.
            This method returns a list of align elements, one for each align element in
            the rowalign attribute. If there is no rowalign attribute, a list of length one
            containing the default value (baseline) is returned.
            </summary>
            <remarks>
            The rowalign attribute specifies how the entries in each row should be aligned. For example, 
            top means that the tops of each entry in each row should be aligned with the tops of the other 
            entries in that row. The columnalign attribute specifies how the entries in each column 
            should be aligned. 
            If there are more entries than are necessary (e.g. more entries than columns for columnalign),
            then only the first entries will be used. If there are fewer entries, then the last entry is 
            repeated as often as necessary. For example, if columnalign="right center" and the table has 
            three columns, the first column will be right aligned and the second and third columns will 
            be centered.
            </remarks>
        </member>
        <member name="P:MathML.MathMLTableElement.ColumnAlign">
            <summary>
            columnalign of type DOMString A string representing the alignment of entries in each column, 
            consisting of a space-separated sequence of alignment specifiers, each of which can have the 
            following values: left, center, or right. The columnalign attribute specifies how the entries 
            in each column should be aligned.
            This method returns a list of align elements, one for each align element in
            the rowalign attribute. If there is no rowalign attribute, a list of length one
            containing the default value (baseline) is returned.
            </summary>
            <remarks>
            If there are more entries than are necessary (e.g. more entries than columns for columnalign),
            then only the first entries will be used. If there are fewer entries, then the last entry is 
            repeated as often as necessary. For example, if columnalign="right center" and the table has 
            three columns, the first column will be right aligned and the second and third columns will 
            be centered.
            </remarks>
        </member>
        <member name="P:MathML.MathMLTableElement.GroupAlign">
            <summary>
            A string specifying how the alignment groups within the cells of each row are to be aligned with 
            the corresponding items above or below them in the same column. The string consists of a 
            sequence of braced group alignment lists. Each group alignment list is a space-separated 
            sequence, each of which can have the following values: left, right, center, or decimalpoint.
            This method returns a list of align elements, one for each align element in
            the rowalign attribute. If there is no rowalign attribute, a list of length one
            containing the default value (baseline) is returned.
            </summary>
            <remarks>
            If there are more entries than are necessary (e.g. more entries than columns for columnalign),
            then only the first entries will be used. If there are fewer entries, then the last entry is 
            repeated as often as necessary. For example, if columnalign="right center" and the table has 
            three columns, the first column will be right aligned and the second and third columns will 
            be centered.
            </remarks>		
        </member>
        <member name="P:MathML.MathMLTableElement.AlignmentScope">
            <summary>
            A string consisting of the values true or false indicating, for each column, whether it can 
            be used as an alignment scope.
            </summary>
            <remarks>
            If there are more entries than are necessary (e.g. more entries than columns for columnalign),
            then only the first entries will be used. If there are fewer entries, then the last entry is 
            repeated as often as necessary. For example, if columnalign="right center" and the table has 
            three columns, the first column will be right aligned and the second and third columns will 
            be centered.
            </remarks>
        </member>
        <member name="P:MathML.MathMLTableElement.ColumnWidth">
            <summary>
            A string consisting of a space-separated sequence of specifiers, 
            each of which can have one of the following forms: auto, number h-unit, namedspace, or fit. 
            (A value of the form namedspace is one of veryverythinmathspace, verythinmathspace, 
            thinmathspace, mediummathspace, thickmathspace, verythickmathspace, or veryverythickmathspace.) 
            This represents the element’s columnwidth attribute. 
            </summary>
            <remarks>
            The columnwidth attribute specifies how wide a column should be. The "auto" value means 
            that the column should be as wide as needed, which is the default. If an explicit value 
            is given, then the column is exactly that wide and the contents of that column are made 
            to fit in that width. The contents are linewrapped or clipped at the discretion of the 
            renderer. If "fit" is given as a value, the remaining page width after subtracting the 
            widths for columns specified as "auto" and/or specific widths is divided equally among 
            the "fit" columns and this value is used for the column width. If insufficient room 
            remains to hold the contents of the "fit" columns, renderers may linewrap or clip the 
            contents of the "fit" columns. When the columnwidth is specified as a percentage, the 
            value is relative to the width of the table. That is, a renderer should try to adjust the 
            width of the column so that it covers the specified percentage of the entire table width.
            </remarks>
        </member>
        <member name="P:MathML.MathMLTableElement.Width">
            <summary>
            width of type DOMString A string that is either of the form number h-unit or is the string auto. 
            This represents the element’s width attribute.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.RowSpacing">
            <summary>
            rowspacing of type DOMString A string consisting of a space-separated sequence of specifiers of the 
            form number v-unit representing the space to be added between rows.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.ColumnSpacing">
            <summary>
            columnspacing of type DOMString A string consisting of a space-separated sequence of 
            specifiers of the form number h-unit representing the space to be added between columns.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.RowLines">
            <summary>
            rowlines of type DOMString A string specifying whether and what kind of lines 
            should be added between each row. The string consists of a space-separated
            sequence of specifiers, each of which can have the following values: none, 
            solid, or dashed.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.ColumnLines">
            <summary>
            columnlines of type DOMString A string specifying whether and what kind of 
            lines should be added between each column. The string consists of a spaceseparated
            sequence of specifiers, each of which can have the following values: none, 
            solid, or dashed.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.Frame">
            <summary>
            frame of type DOMString A string specifying a frame around the table. 
            Allowed values are (none | solid | dashed).
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.FrameSpacing">
            <summary>
            A string of the form number h-unit number v-unit specifying the spacing between 
            table and its frame. This property returns 2 Length types, in the order that
            they were specified in the original attribute string. If the attribute string
            contains more than 2 elements, all of them are returned, it is up to the 
            renderer to only accept the first 2.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.EqualRows">
            <summary>
            equalrows of type DOMString A string with the values true or false.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.EqualColumns">
            <summary>
            equalcolumns of type DOMString A string with the values true or false.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.DisplayStyle">
            <summary>
            displaystyle of type DOMString A string with the values true or false.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.Side">
            <summary>
            side of type DOMString A string with the values left, right, leftoverlap, 
            or rightoverlap.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.MinLabelSpacing">
            <summary>
            minlabelspacing of type DOMString A string of the form number h-unit, specifying 
            the minimum space between a label and the adjacent entry in the labeled																																						 row.
            </summary>
        </member>
        <member name="P:MathML.MathMLTableElement.Rows">
            <summary>
            rows of type MathMLNodeList, readonly A MathMLNodeList consisting of MathMLTableRowElements 
            and MathMLLabeledRowElements representing the rows of the table. This is a live object.
            </summary>
        </member>
        <member name="T:MathML.MathMLTableNodeList">
            <summary>
            This interface is provided as a specialization of the NodeList interface. 
            The child Nodes of this NodeList must be MathMLElements or Text nodes. Note that
            MathMLNodeLists are frequently used in the DOM as values of readonly attributes, 
            encapsulating, for instance, various collections of child elements. When
            used in this way, these objects are always understood to be live, in the sense 
            that changes to the document are immediately reflected in them.
            </summary>
        </member>
        <member name="M:MathML.MathMLTableNodeList.#ctor(System.Xml.XmlNodeList)">
            <summary>
            create a node list, attached to the given parent, and stating at the
            first child node
            </summary>
        </member>
        <member name="T:MathML.MathMLUnderOverElement">
            <summary>
            This interface extends the MathMLPresentationElement interface for the MathML 
            underscript, overscript and overscript-underscript pair elements munder, mover
            and munderover.
            </summary>
        </member>
        <member name="M:MathML.MathMLUnderOverElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLUnderOverElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.AccentUnder">
            <summary>
            Either true or false if present; a string controlling whether underscript is drawn as an 
            ‘accent’ or as a ‘limit’, if specified; this is the element’s accentunder attribute. 
            This must return null for an mover.
            </summary>
            <remarks>
            The accentunder attribute controls whether underscript is drawn as an ‘accent’ or as a limit. 
            The main difference between an accent and a limit is that the limit is reduced in size whereas 
            an accent is the same size as the base. A second difference is that the accent is drawn closer 
            to the base. The default value of accentunder is false, unless underscript is an mo element or 
            an embellished operator (see Section 3.2.5). If underscript is an mo element, the value of its 
            accent attribute is used as the default value of accentunder. If underscript is an embellished 
            operator, the accent attribute of the mo element at its core is used as the default value. 
            As with all attributes, an explicitly given value overrides the default. Here is an example 
            (accent versus underscript): x+y+z| {z } versus x+y+z | {z }. The MathML representation for this 
            example is shown below. If the base is an operator with movablelimits=true (or an embellished 
            operator whose mo element core has movablelimits=true), and displaystyle=false, then underscript 
            is drawn in a subscript position. In this case, the accentunder attribute is ignored. This is 
            often used for limits on symbols such as &amp;sum;. Within underscript, munder always sets 
            displaystyle to false, but increments scriptlevel by 1 only when accentunder is false. Within 
            base, it always leaves both attributes unchanged. (These attributes are inherited by every element 
            through its rendering environment, but can be set explicitly only on mstyle; see Section 3.3.4.)
            </remarks>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.Accent">
            <summary>
            Either true or false if present; a string controlling whether overscript is drawn as an 
            ‘accent’ or as a ‘limit’, if specified; this is the element’s accent attribute. This must 
            return null for an munder.
            </summary>
            <remarks>
            The accent attribute controls whether overscript is drawn as an ‘accent’ (diacritical mark) 
            or as a limit. The main difference between an accent and a limit is that the limit is reduced 
            in size whereas an accent is the same size as the base. A second difference is that the 
            accent is drawn closer to the base. This is shown below (accent versus limit): ˆ x versus ˆx.
            These differences also apply to ‘mathematical accents’ such as bars over expressions: z }| 
            { x+y+z versus z }|{x+y+z. The MathML representation for each of these examples is shown below.
            The default value of accent is false, unless overscript is an mo element or an embellished 
            operator (see Section 3.2.5). If overscript is an mo element, the value of its accent attribute 
            is used as the default value of accent for mover. If overscript is an embellished operator, 
            the accent attribute of the mo element at its core is used as the default value. If the base is 
            an operator with movablelimits=true (or an embellished operator whose mo element core has 
            movablelimits=true), and displaystyle=false, then overscript is drawn in a superscript position. 
            In this case, the accent attribute is ignored. This is often used for limits on symbols such as 
            &amp;sum;. Within overscript, mover always sets displaystyle to false, but increments scriptlevel 
            by 1 only when accent is false. Within base, it always leaves both attributes unchanged. (These 
            attributes are inherited by every element through its rendering environment, but can be set 
            explicitly only on mstyle; see Section 3.3.4.)
            </remarks>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.Base">
            <summary>
            A MathMLElement representing the base of the script. This is the first child of the element.
            </summary>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.UnderScript">
            <summary>
            MathMLElement A MathMLElement representing the underscript of the script. This is the second 
            child of a munder or munderover; retrieval must return null for an mover. 
            throws DOMException HIERARCHY_REQUEST_ERR: Raised when the element is a mover.
            </summary>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.OverScript">
            <summary>
            A MathMLElement representing the overscript of the script. This is the second child of a mover 
            or the third child of a munderover; retrieval must return null for an munder.
            throws DOMException HIERARCHY_REQUEST_ERR: Raised when the element is a munder.
            </summary>
        </member>
        <member name="P:MathML.MathMLUnderOverElement.EmbelishedOperator">
            <summary>
            Implement rule 2 of the definition of an embelished operator
            <see cref="T:MathML.MathMLElement"/>
            </summary>
        </member>
        <member name="T:MathML.MathMLVectorElement">
            <summary>
            vector is the container element for a vector.
            </summary>
        </member>
        <member name="M:MathML.MathMLVectorElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="M:MathML.MathMLVectorElement.Accept(MathML.MathMLVisitor,System.Object)">
            <summary>
            accept a visitor.
            return the return value of the visitor's visit method
            </summary>
        </member>
        <member name="T:MathML.MathMLVisitor">
            <summary>
            A way to provide opperations on a mathml tree.
            Currently, all Accept methods on mathml elements
            will just call Visit on the visitor, passing allong
            the args parameters, and returning the return value
            of the vistor.
            </summary>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLApplyElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLBvarElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLFnElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLLambdaElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLListElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLSetElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLMathElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLActionElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLEncloseElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLFencedElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPaddedElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLStyleElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLTableCellElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLDocument,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLAnnotationElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLCaseElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLConditionElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLCiElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLCnElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLCsymbolElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLDeclareElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>		
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLIntervalElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLMatrixElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>		
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLMatrixRowElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPiecewiseElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>		
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPredefinedSymbol,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>		
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLVectorElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLAlignGroupElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLAlignMarkElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLFractionElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLGlyphElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>		
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLMultiScriptsElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLOperatorElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLStringLitElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLRadicalElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLScriptElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLSpaceElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLTableRowElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLTableElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLLabeledRowElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLUnderOverElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLSemanticsElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLXMLAnnotationElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>	
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPresentationToken,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPresentationContainer,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLSeparator,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLPlaceholderElement,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="M:MathML.MathMLVisitor.Visit(MathML.MathMLContentContainer,System.Object)">
            <summary>
            Visit the specified MathML Element element
            </summary>
            <param name="e">the element that is being visited</param>
            <param name="args">user supplied arguments</param>
            <returns>user supplied result</returns>
        </member>
        <member name="T:MathML.MathMLXMLAnnotationElement">
            <summary>
            This interface represents the annotation-xml element of MathML.
            </summary>
        </member>
        <member name="M:MathML.MathMLXMLAnnotationElement.#ctor(System.String,System.String,System.String,MathML.MathMLDocument)">
            <summary>
            creates a new MathMLOperatorElement. 
            </summary>
            <param name="prefix">The prefix of the new element (if any).</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any).</param>
            <param name="doc">The owner document</param>
        </member>
        <member name="T:MathML.Operator">
            <summary>
            index and attributes for a mathml operator "mo" element
            
            default values
            form prefix | infix | postfix set by position of operator in an mrow (rule given below); 
            	used with mo content to index operator dictionary		 * 
            fence true | false set by dictionary (false)
            separator true | false set by dictionary (false)
            lspace number h-unit | namedspace set by dictionary (thickmathspace)
            rspace number h-unit | namedspace set by dictionary (thickmathspace)
            stretchy true | false set by dictionary (false)
            symmetric true | false set by dictionary (true)
            maxsize number [ v-unit | h-unit ] | namedspace | infinity set by dictionary (infinity)
            minsize number [ v-unit | h-unit ] | namedspace set by dictionary (1)
            largeop true | false set by dictionary (false)
            movablelimits true | false set by dictionary (false)
            accent true | false set by dictionary (false)
            </summary>
        </member>
        <member name="M:MathML.Operator.Default(MathML.Form)">
            <summary>
            get the default set of attributes. Note, the form must
            be given, as it is determined the the operators position in the
            row. This creates a default set of attributes with the given form, 
            and a empty name.
            </summary>
        </member>
        <member name="T:MathML.OperatorDictionary">
            <summary>
            Summary description for MathMLOperatorDictionary.
            </summary>
        </member>
        <member name="F:MathML.OperatorDictionary.operators">
            <summary>
            list of operators. These were all auto-generated from the w3c provided operator
            dictionary on 12-13-2003
            </summary>
        </member>
        <member name="T:MathML.UserDataHandler">
            <summary>
            Standard interface Introduced in DOM Level 3. This is currently not part
            of the ms xml implementation, but it is added here. In the future, when MS
            gets a standard compliant DOM implementation, this will go away.
            
            When associating an object to a key on a node using Node.setUserData() [p.72] the
            application can provide a handler that gets called when the node the object is 
            associated to is being cloned, imported, or renamed. This can be used by the 
            application to implement various behaviors regarding the data it associates 
            to the DOM nodes. This interface defines that handler.
            </summary>																
        </member>
        <member name="T:MathML.UserDataOperation">
            <summary>
            operation type for UserDataHandler
            </summary>
        </member>
        <member name="T:MathML.Utility">
            <summary>
            general utility functions
            </summary>
        </member>
        <member name="M:MathML.Utility.ParseColor(System.String)">
            <summary>
            converts a string in the form of "#rgb" or "#rrggbb" into a 
            system color. If the string is ill formed, Color.Empty is returned
            also deal with string of format '#rgb', here r becomes rr, g becomes gg, 
            and b becomes bb
            </summary>
        </member>
        <member name="M:MathML.Utility.ParseLengths(System.String,MathML.Length[])">
            <summary>
            parse a list of length types, each one separated by one or more space
            </summary>
        </member>
        <member name="M:MathML.Utility.ParseAligns(System.String,MathML.Align[])">
            <summary>
            parse a space separated list of align values
            </summary>
            <returns>
            a list of Align values if the string has one or more valid align
            strings, an list of length one, containing a single default value
            otherwise
            </returns>
        </member>
        <member name="M:MathML.Utility.ParseBoolList(System.String,System.Boolean)">
            <summary>
            parse a space separated list of bool values
            </summary>
            <returns>
            a list of bool values if the string has one or more valid bool
            strings, an list of length one, containing a single default value
            otherwise
            </returns>
        </member>
    </members>
</doc>
